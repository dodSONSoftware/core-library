using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace dodSON.Core.Networking
{
    /// <summary>
    /// Facilitates communication between multiple network servers.
    /// </summary>
    /// <example>
    /// <para>
    /// The example replicates a small network of named pipe servers all interconnected through a single Http server; the example will demonstrate named pipe clients making and servicing requests directly to each other across an Http server hub. The following example will create 5 named pipes servers (Server1, Server2, Server3, Server4, Server5) each with 1 client and an HTTP server (ServerRS) with 1 client. All clients can be set to either respond to a message or not. The ServerRS will act as both an HTTP relay server and as a host to clients. Bridges will be created between each named pipe server and the relay server; creating a network of servers using the relay server as the hub. 
    /// <br/><br/>
    /// Server1 (NamedPipe) &lt;-------V
    /// <br/>
    /// Server2 (NamedPipe) &lt;-------V 
    /// <br/>
    /// Server3 (NamedPipe) &lt;----&gt; ServerRS (HTTP) 
    /// <br/>
    /// Server4 (NamedPipe) &lt;-------^  
    /// <br/>
    /// Server5 (NamedPipe) &lt;-------^  
    /// <br/><br/>
    /// Once started, a single, non-client targeted message will be broadcast from Client1 on Server1. Clients on Server1, Server3 and Server5 are all set to respond directly to any client message received. Since Client1 on Server1 is set to respond there will be a message oscillation occur between clients on Server1 and Server3 and between clients on Server1 and Server5; but not between clients on Server2, Server3, Server4 and Server5; Server3 and Server5 respond directly to Server1, not to each other, and clients on Server2 and Server4 simply do not respond. Clients set to respond to messages respond directly to the client that sent the message using the message’s ClientId.
    /// <br/><br/>
    /// Two logs will be created, the server log will contain all log activity from the relay server (ServerRS); the client log contains all logs generated by all clients. First, the client log shows all clients receiving the non-client targeted message and then only clients set to respond to messages are seen sending and receiving messages afterwards.
    /// <br/><br/>
    /// The console application will loop until the escape key is press, displaying networking statistics from the relay server (ServerRS). There are several other commands available, feel free to play with them; the responses will show up in either the server log or the client log depending on the command. 
    /// <br/><br/>
    /// This demonstrates the functionality of the Bridge, the proper handling of client targeted messages and the transport of messages between different types of networks.
    /// </para>
    /// <note type="note">
    /// It may be required for this application to be run as an administrator or configure a URL registration, and add a Firewall exception for the URL your service will be using. 
    /// See the following link for further information: <a href="http://go.microsoft.com/fwlink/?LinkId=70353">Configuring HTTP and HTTPS</a>  
    /// </note>
    /// <para>Create a console application and add the following code:</para>
    /// <code>
    /// class Program
    /// {
    ///     private static dodSON.Core.Logging.ICachedLog ClientLog;
    /// 
    ///     static void Main(string[] args)
    ///     {
    ///         // ################################################
    ///         // ######### BE SURE TO CHANGE THIS VALUE #########
    ///         // ########
    ///         // ######## THE outputRootPath DIRECTORY WILL BE DELETED ########
    ///         // ######## DO NOT DIRECT THE outputRootPath DIRECTORY TO A FOLDER WITH ANY PRE-EXISTING FILES ########
    ///         // ######## BEST PRACTICE WOULD BE TO SET THE outputRootPath DIRECTORY TO A NEW FOLDER ########
    ///         // ########
    /// 
    ///         string outputRootPath = @"C:\(WORKING)\Dev\Networking2";
    /// 
    ///         // ################################################
    /// 
    ///         // ******** Validate outputRootPath is Available and Clear
    ///         if (System.IO.Directory.Exists(outputRootPath))
    ///         {
    ///             bool recursive = true;
    ///             System.IO.Directory.Delete(outputRootPath, recursive);
    ///             dodSON.Core.Threading.ThreadingHelper.Sleep(250);
    ///         }
    ///         System.IO.Directory.CreateDirectory(outputRootPath);
    /// 
    ///         // ******** Create and Open Server Log
    ///         string ServerLogFilename = System.IO.Path.Combine(outputRootPath, @"ServerLog.txt");
    ///         bool ServerWriteLogEntriesUsingLocalTime = true;
    ///         dodSON.Core.Logging.ILog serverLogActual = new dodSON.Core.Logging.FileEventLog.Log(ServerLogFilename,
    ///                                                                                             ServerWriteLogEntriesUsingLocalTime);
    ///         bool serverAutoFlushLogs = true;
    ///         int serverFlushMaximumLogs = 15;
    ///         TimeSpan serverFlushTimeLimit = TimeSpan.FromSeconds(5);
    ///         dodSON.Core.Logging.ICachedLog ServerLog = new dodSON.Core.Logging.CachedLog(serverLogActual,
    ///                                                                                      serverAutoFlushLogs,
    ///                                                                                      serverFlushMaximumLogs,
    ///                                                                                      serverFlushTimeLimit);
    ///         ServerLog.Open();
    /// 
    ///         // ******** Create and Open Client Log
    ///         string ClientLogFilename = System.IO.Path.Combine(outputRootPath, @"ClientLog.txt");
    ///         bool clientWriteLogEntriesUsingLocalTime = true;
    ///         dodSON.Core.Logging.ILog clientLogActual = new dodSON.Core.Logging.FileEventLog.Log(ClientLogFilename,
    ///                                                                                             clientWriteLogEntriesUsingLocalTime);
    ///         bool clientAutoFlushLogs = true;
    ///         int clientFlushMaximumLogs = 15;
    ///         TimeSpan clientFlushTimeLimit = TimeSpan.FromSeconds(5);
    ///         ClientLog = new dodSON.Core.Logging.CachedLog(clientLogActual,
    ///                                                       clientAutoFlushLogs,
    ///                                                       clientFlushMaximumLogs,
    ///                                                       clientFlushTimeLimit);
    ///         ClientLog.Open();
    /// 
    ///         // ******** Create and Start Log Monitoring Thread
    ///         dodSON.Core.Threading.ThreadWorker logThreadWorker = new dodSON.Core.Threading.ThreadWorker(TimeSpan.FromSeconds(1),
    ///                                                                                                     (ct) =&gt;
    ///                                                                                                     {
    ///                                                                                                         // execute event
    ///                                                                                                         if (ServerLog.IsFlushable)
    ///                                                                                                         {
    ///                                                                                                             ServerLog.FlushLogs();
    ///                                                                                                         }
    ///                                                                                                         if (ClientLog.IsFlushable)
    ///                                                                                                         {
    ///                                                                                                             ClientLog.FlushLogs();
    ///                                                                                                         }
    ///                                                                                                     });
    ///         logThreadWorker.Start();
    /// 
    ///         bool sendMessages = true;
    /// 
    ///         // ******** Build all Servers and Clients
    ///         Console.WriteLine($"{Environment.NewLine}Building Servers and Clients:");
    ///         List&lt;dodSON.Core.Networking.IServer&gt; servers = new List&lt;dodSON.Core.Networking.IServer&gt;();
    ///         List&lt;dodSON.Core.Networking.Bridge&gt; bridges = new List&lt;dodSON.Core.Networking.Bridge&gt;();
    ///         int httpPortIndex = 49999;
    ///         bool namedPipesServer = true;
    ///         bool httpServer = false;
    ///         bool clientWillRespond = true;
    ///         int numberOfClientsPerServer = 1;
    /// 
    ///         // ******* create 1 relay server
    ///         dodSON.Core.Networking.IServer relayServer = CreateServerClient(httpServer,
    ///                                                                         "ServerRS",
    ///                                                                         numberOfClientsPerServer,
    ///                                                                         !clientWillRespond,
    ///                                                                         out List&lt;dodSON.Core.Networking.IClient&gt; clientsRS1);
    ///         servers.Add(relayServer);
    /// 
    ///         //// ******* create 5 servers and bridge them to the relayServer
    ///         servers.Add(CreateServerClient(namedPipesServer, "Server1", numberOfClientsPerServer, clientWillRespond, out List&lt;dodSON.Core.Networking.IClient&gt; clientsS1));
    ///         bridges.Add(BuildBridge(namedPipesServer, servers.Last(), httpServer, relayServer));
    ///         servers.Add(CreateServerClient(namedPipesServer, "Server2", numberOfClientsPerServer, !clientWillRespond, out List&lt;dodSON.Core.Networking.IClient&gt; clientsS2));
    ///         bridges.Add(BuildBridge(namedPipesServer, servers.Last(), httpServer, relayServer));
    ///         servers.Add(CreateServerClient(namedPipesServer, "Server3", numberOfClientsPerServer, clientWillRespond, out List&lt;dodSON.Core.Networking.IClient&gt; clientsS3));
    ///         bridges.Add(BuildBridge(namedPipesServer, servers.Last(), httpServer, relayServer));
    ///         servers.Add(CreateServerClient(namedPipesServer, "Server4", numberOfClientsPerServer, !clientWillRespond, out List&lt;dodSON.Core.Networking.IClient&gt; clientsS4));
    ///         bridges.Add(BuildBridge(namedPipesServer, servers.Last(), httpServer, relayServer));
    ///         servers.Add(CreateServerClient(namedPipesServer, "Server5", numberOfClientsPerServer, clientWillRespond, out List&lt;dodSON.Core.Networking.IClient&gt; clientsS5));
    ///         bridges.Add(BuildBridge(namedPipesServer, servers.Last(), httpServer, relayServer));
    /// 
    ///         // ****************************************************************************************************
    /// 
    ///         // ******* Send a Non-Client Targeted Message from a Responding Client
    ///         Console.WriteLine($"{Environment.NewLine}Sending Message...");
    ///         clientsS1[0].SendMessage&lt;string&gt;("", $"Message from {clientsS1[0].Id}");
    /// 
    ///         // ****************************************************************************************************
    /// 
    ///         // ******** Loop Until User Terminated
    ///         DateTimeOffset startTime = DateTimeOffset.Now;
    ///         System.Diagnostics.Stopwatch displayRefreshTimer = System.Diagnostics.Stopwatch.StartNew();
    ///         bool loopIt = true;
    ///         while (loopIt)
    ///         {
    ///             if (displayRefreshTimer.Elapsed &gt; TimeSpan.FromSeconds(1))
    ///             {
    ///                 displayRefreshTimer.Restart();
    ///                 RefreshDisplay(startTime, relayServer, ServerLogFilename, ClientLogFilename);
    ///             }
    ///             if (Console.KeyAvailable)
    ///             {
    ///                 switch (Console.ReadKey(true).Key)
    ///                 {
    ///                     case ConsoleKey.Escape:
    ///                         loopIt = false;
    ///                         break;
    ///                     case ConsoleKey.F1:
    ///                         dodSON.Core.Threading.ThreadCancelToken cancelToken = new dodSON.Core.Threading.ThreadCancelToken();
    ///                         relayServer.PingAllClients(cancelToken);
    ///                         break;
    ///                     case ConsoleKey.F4:
    ///                         relayServer.RestartAllClients(5, TimeSpan.FromSeconds(5));
    ///                         break;
    ///                     case ConsoleKey.F5:
    ///                         // send a non-client targeted message from a non-responding client
    ///                         clientsS2[0].SendMessage("", "F5 Message");
    ///                         break;
    ///                     default:
    ///                         break;
    ///                 }
    ///             }
    ///         }
    /// 
    ///         // ******** Final Display
    ///         displayRefreshTimer.Stop();
    ///         RefreshDisplay(startTime, relayServer, ServerLogFilename, ClientLogFilename);
    /// 
    ///         // ****************************************************************************************************
    /// 
    ///         // ******** Shut it all down
    ///         Console.WriteLine($"{Environment.NewLine}Please Standby...");
    ///         sendMessages = false;
    ///         // wait a bit for any messages to complete their journeys
    ///         dodSON.Core.Threading.ThreadingHelper.Sleep(1500);
    /// 
    ///         try
    ///         {
    ///             // ******** Close All Clients
    ///             Console.WriteLine($"{Environment.NewLine}Closing All Clients");
    ///             foreach (dodSON.Core.Networking.IServer server in servers)
    ///             {
    ///                 server.CloseAllClients();
    ///             }
    /// 
    ///             // ******** Close Bridges
    ///             Console.WriteLine($"{Environment.NewLine}Closing All Bridges");
    ///             foreach (dodSON.Core.Networking.Bridge bridge in bridges)
    ///             {
    ///                 Console.WriteLine($"    Closing {bridge.InternalClient.Address.Name} to {bridge.ExternalClient.Address.Name}");
    ///                 bridge.Close(out Exception closeBC5Exception);
    ///             }
    ///             // ******** Close Servers
    ///             Console.WriteLine($"{Environment.NewLine}Closing All Servers");
    ///             foreach (dodSON.Core.Networking.IServer server in servers)
    ///             {
    ///                 Console.WriteLine($"    Closing {server.Address.Name}");
    ///                 if (!server.Close(out Exception serverCloseException))
    ///                 {
    ///                     Console.WriteLine($"{Environment.NewLine}--------------------------------{Environment.NewLine}ERROR: Cannot close server. {serverCloseException?.Message}");
    ///                 }
    ///             }
    ///         }
    ///         catch { }
    /// 
    ///         // ******** Close Logs
    ///         ClientLog.Close();
    ///         ServerLog.Close();
    /// 
    ///         // ****************************************************************************************************
    /// 
    ///         Console.WriteLine($"{Environment.NewLine}================================");
    ///         Console.Write("press anykey&gt;");
    ///         Console.ReadKey(true);
    ///         Console.WriteLine();
    /// 
    ///         // ################################################################
    ///         // ################################################################
    ///         // Internal Functions
    ///         // ################################################################
    ///         // ################################################################
    /// 
    ///         dodSON.Core.Networking.IServer CreateServerClient(bool createNamedPipesServer,
    ///                                                           string serverName,
    ///                                                           int clientCount,
    ///                                                           bool haveClientRespond,
    ///                                                           out List&lt;dodSON.Core.Networking.IClient&gt; clients)
    ///         {
    ///             clients = new List&lt;dodSON.Core.Networking.IClient&gt;();
    /// 
    ///             // ******** Create Transport Configuration
    /// 
    ///             // create channel address
    ///             string ipAddress = dodSON.Core.Networking.NetworkingHelper.DefaultIpAddress;
    ///             int port = dodSON.Core.Networking.NetworkingHelper.RecommendedMinumumPortValue;
    ///             dodSON.Core.Networking.IChannelAddress channelAddress = new dodSON.Core.Networking.ChannelAddress(ipAddress, port, serverName);
    /// 
    ///             // create server configuration
    ///             dodSON.Core.Networking.IServerConfiguration serverConfiguration = new dodSON.Core.Networking.ServerConfiguration(serverName);
    /// 
    ///             // create transport configuration
    ///             System.Security.Cryptography.HashAlgorithm transportHashAlgorithm = new System.Security.Cryptography.SHA512Managed();
    ///             System.Security.SecureString transportPassword = new System.Security.SecureString();
    ///             bool autoClearIncomingCharArray = true;
    ///             char[] password = "BadPa$$w0rd".ToCharArray();
    ///             dodSON.Core.Cryptography.CryptographyExtensions.AppendChars(transportPassword, password, autoClearIncomingCharArray);
    ///             byte[] transportSalt = dodSON.Core.Cryptography.CryptographyHelper.GenerateCryptographicallyRandomArray(128);
    ///             dodSON.Core.Cryptography.ISaltedPassword transportSaltedPassword = new dodSON.Core.Cryptography.SaltedPassword(transportHashAlgorithm,
    ///                                                                                                                            transportPassword,
    ///                                                                                                                            transportSalt);
    ///             Type transportSymmetricAlgorithmType = typeof(System.Security.Cryptography.RijndaelManaged);
    ///             dodSON.Core.Cryptography.IEncryptorConfiguration transportEncryptorConfiguration = new dodSON.Core.Cryptography.EncryptorConfiguration(transportSaltedPassword,
    ///                                                                                                                                                    transportSymmetricAlgorithmType);
    ///             Type compressorType = typeof(dodSON.Core.Compression.DeflateStreamCompressor);
    ///             bool useChunking = true;
    ///             int chunkSize = dodSON.Core.Networking.NetworkingHelper.MinimumTransportEnvelopeChunkSize;
    ///             TimeSpan envelopeCacheTimeLimit = TimeSpan.FromSeconds(10);
    ///             TimeSpan seenMessageCacheTimeLimit = TimeSpan.FromSeconds(7);
    ///             dodSON.Core.Networking.ITransportConfiguration transportConfiguration = new dodSON.Core.Networking.TransportConfiguration(transportEncryptorConfiguration,
    ///                                                                                                                                       compressorType,
    ///                                                                                                                                       useChunking,
    ///                                                                                                                                       chunkSize,
    ///                                                                                                                                       envelopeCacheTimeLimit,
    ///                                                                                                                                       seenMessageCacheTimeLimit);
    /// 
    ///             // ******** Create Challenge Controller
    /// 
    ///             // create challenge controller
    ///             byte[] actualEvidence = dodSON.Core.Cryptography.CryptographyHelper.GenerateCryptographicallyRandomArray(128);
    ///             dodSON.Core.Networking.IChallengeController passwordChallengeController = new dodSON.Core.Networking.ChallengeControllers.PasswordChallengeController(actualEvidence);
    /// 
    ///             // ******** Create Server
    /// 
    ///             Console.WriteLine($"Opening {serverName}");
    /// 
    ///             string communicationLogSourceId = "Network";
    ///             dodSON.Core.Networking.IServer server;
    ///             if (createNamedPipesServer)
    ///             {
    ///                 server = CreateNP_TunnellingRegistrationServer(channelAddress,
    ///                                                                serverConfiguration,
    ///                                                                transportConfiguration,
    ///                                                                passwordChallengeController,
    ///                                                                (s, e) =&gt;
    ///                                                                {
    ///                                                                    // activity log event
    ///                                                                    if (e.Header != dodSON.Core.Networking.ActivityLogsEventType.Network_RequestAllStatistics)
    ///                                                                    {
    ///                                                                        ServerLog.Write(e.Logs);
    ///                                                                    }
    ///                                                                },
    ///                                                                communicationLogSourceId);
    ///             }
    ///             else
    ///             {
    ///                 channelAddress = new dodSON.Core.Networking.ChannelAddress(channelAddress.IPAddress, ++httpPortIndex, channelAddress.Name);
    ///                 server = CreateHTTP_TunnellingRegistrationServer(channelAddress,
    ///                                                                  serverConfiguration,
    ///                                                                  transportConfiguration,
    ///                                                                  passwordChallengeController,
    ///                                                                  (s, e) =&gt;
    ///                                                                  {
    ///                                                                      // activity log event
    ///                                                                      if (e.Header != dodSON.Core.Networking.ActivityLogsEventType.Network_RequestAllStatistics)
    ///                                                                      {
    ///                                                                          ServerLog.Write(e.Logs);
    ///                                                                      }
    ///                                                                  },
    ///                                                                  communicationLogSourceId);
    ///             }
    /// 
    ///             // ******** write server configuration to file
    ///             SerializeToFile(serverName, server.Configuration);
    /// 
    ///             // ******** Open Server
    /// 
    ///             if (server.Open(out Exception serverOpenException) == dodSON.Core.Networking.ChannelStates.Open)
    ///             {
    ///                 for (int i = 0; i &lt; clientCount; i++)
    ///                 {
    ///                     string clientName = $"{server.Address.Name}_Client{i + 1}";
    ///                     Console.WriteLine($"        Opening {clientName}");
    /// 
    ///                     // ******** create client
    /// 
    ///                     dodSON.Core.Networking.IClient client;
    ///                     bool shouldClientConnectToSharedMessageBus = true;
    ///                     if (createNamedPipesServer)
    ///                     {
    ///                         client = CreateNP_Client(clientName, server.Address, server.TransportController.RegistrationController, shouldClientConnectToSharedMessageBus);
    ///                     }
    ///                     else
    ///                     {
    ///                         client = CreateHTTP_Client(clientName, server.Address, server.TransportController.RegistrationController, shouldClientConnectToSharedMessageBus);
    ///                     }
    ///                     if (client.Open(out Exception clientOpenException) == dodSON.Core.Networking.ChannelStates.Open)
    ///                     {
    ///                         // add client to OUT clients list
    ///                         clients.Add(client);
    ///                         //
    ///                         client.MessageBus += (object sender, dodSON.Core.Networking.MessageEventArgs e) =&gt;
    ///                         {
    ///                             if (sendMessages &amp;&amp; haveClientRespond)
    ///                             {
    ///                                 // ECHO
    ///                                 dodSON.Core.Networking.IClient senderClient = (sender as dodSON.Core.Networking.IClient);
    ///                                 string responseMessage = $"Hello from {senderClient.Id}";
    ///                                 string responseLog = $"TargetId={e.Message.TargetId}; ClientId={e.Message.ClientId}";
    ///                                 // delay response to minimize flooding the log too much
    ///                                 dodSON.Core.Threading.ThreadingHelper.Sleep(TimeSpan.FromSeconds(.5));
    ///                                 // log detailed information
    ///                                 ClientLog.Write(dodSON.Core.Logging.LogEntryType.Information, senderClient.Id, responseLog);
    ///                                 // send response
    ///                                 senderClient?.SendMessage(e.Message.ClientId, responseMessage);
    ///                             }
    ///                         };
    ///                         // write client configuration to file
    ///                         SerializeToFile(clientName, client.Configuration);
    ///                     }
    ///                     else
    ///                     {
    ///                         Console.WriteLine($"{Environment.NewLine}--------------------------------{Environment.NewLine}ERROR: Cannot open client. {clientOpenException?.Message}");
    ///                     }
    ///                 }
    ///             }
    ///             else
    ///             {
    ///                 Console.WriteLine($"{Environment.NewLine}--------------------------------{Environment.NewLine}ERROR: Cannot open server. {serverOpenException?.Message}");
    ///             }
    ///             //
    ///             return server;
    ///         }
    /// 
    ///         dodSON.Core.Networking.Bridge BuildBridge(bool isServer1NamedPipe, dodSON.Core.Networking.IServer server1,
    ///                                                   bool isServer2NamedPipe, dodSON.Core.Networking.IServer server2)
    ///         {
    ///             string bridgeName = $"Bridge_{server1.Id}_{server2.Id}";
    ///             Console.WriteLine($"Opening {bridgeName}");
    /// 
    ///             // create internal client
    ///             dodSON.Core.Networking.IClient client1;
    ///             bool shouldClientConnectToSharedMessageBus = false;
    ///             if (isServer1NamedPipe)
    ///             {
    ///                 client1 = CreateNP_Client($"{bridgeName}_Connection1", server1.Address, server1.TransportController.RegistrationController, shouldClientConnectToSharedMessageBus);
    ///             }
    ///             else
    ///             {
    ///                 client1 = CreateHTTP_Client($"{bridgeName}_Connection1", server1.Address, server1.TransportController.RegistrationController, shouldClientConnectToSharedMessageBus);
    ///             }
    /// 
    ///             // create external client
    ///             dodSON.Core.Networking.IClient client2;
    ///             if (isServer2NamedPipe)
    ///             {
    ///                 client2 = CreateNP_Client($"{bridgeName}_Connection2", server2.Address, server2.TransportController.RegistrationController, shouldClientConnectToSharedMessageBus);
    ///             }
    ///             else
    ///             {
    ///                 client2 = CreateHTTP_Client($"{bridgeName}_Connection2", server2.Address, server2.TransportController.RegistrationController, shouldClientConnectToSharedMessageBus);
    ///             }
    /// 
    ///             // create bridge
    ///             dodSON.Core.Networking.Bridge bridge = new dodSON.Core.Networking.Bridge(client1, client2);
    /// 
    ///             // open bridge
    ///             if (bridge.Open(out Exception bridgeOpenException) != dodSON.Core.Networking.ChannelStates.Open)
    ///             {
    ///                 Console.WriteLine($"{Environment.NewLine}--------------------------------{Environment.NewLine}ERROR: Cannot open bridge. {bridgeOpenException?.Message}");
    ///             }
    /// 
    ///             // write bridge configuration to file
    ///             SerializeToFile(bridgeName, bridge.Configuration);
    /// 
    ///             //
    ///             return bridge;
    ///         }
    /// 
    ///         void SerializeToFile(string name, dodSON.Core.Configuration.IConfigurationGroup configuration)
    ///         {
    ///             // XML
    ///             string xmlOutputFilename = System.IO.Path.Combine(outputRootPath, $@"{name}.configuration.xml");
    ///             dodSON.Core.Configuration.IConfigurationSerializer&lt;StringBuilder&gt; xmlSerializer = new dodSON.Core.Configuration.XmlConfigurationSerializer();
    ///             System.IO.File.WriteAllText(xmlOutputFilename, xmlSerializer.Serialize(configuration).ToString());
    /// 
    ///             // INI
    ///             string iniOutputFilename = System.IO.Path.Combine(outputRootPath, $@"{name}.configuration.ini");
    ///             dodSON.Core.Configuration.IConfigurationSerializer&lt;StringBuilder&gt; iniSerializer = new dodSON.Core.Configuration.IniConfigurationSerializer();
    ///             System.IO.File.WriteAllText(iniOutputFilename, iniSerializer.Serialize(configuration).ToString());
    /// 
    ///             // CSV
    ///             string csvOutputFilename = System.IO.Path.Combine(outputRootPath, $@"{name}.configuration.csv");
    ///             dodSON.Core.Configuration.IConfigurationSerializer&lt;StringBuilder&gt; csvSerializer = new dodSON.Core.Configuration.CsvConfigurationSerializer();
    ///             System.IO.File.WriteAllText(csvOutputFilename, csvSerializer.Serialize(configuration).ToString());
    ///         }
    ///     }
    /// 
    ///     // ################################################################
    ///     // ######## SERVERS
    ///     // ################################################################
    /// 
    ///     // NAMED PIPES
    /// 
    ///     private static dodSON.Core.Networking.IServer CreateNP_NullRegistrationServer(dodSON.Core.Networking.ChannelAddress channelAddress,
    ///                                                                                   dodSON.Core.Networking.ServerConfiguration serverConfiguration,
    ///                                                                                   dodSON.Core.Networking.TransportConfiguration transportConfiguration,
    ///                                                                                   dodSON.Core.Networking.IChallengeController challengeController,
    ///                                                                                   Action&lt;object, dodSON.Core.Networking.ActivityLogsEventArgs&gt; activityLogsEventHandler,
    ///                                                                                   string logSourceId)
    ///     {
    ///         // create the server
    ///         dodSON.Core.Networking.IRegistrationController registrationController = new dodSON.Core.Networking.RegistrationControllers.NullRegistrationController(transportConfiguration, challengeController);
    ///         dodSON.Core.Networking.ITransportController serverTransportController = new dodSON.Core.Networking.TransportController(transportConfiguration, registrationController);
    ///         dodSON.Core.Networking.IServer server = new dodSON.Core.Networking.NamedPipes.Server(channelAddress, serverConfiguration, serverTransportController, logSourceId);
    ///         server.ActivityLogsEvent += new EventHandler&lt;dodSON.Core.Networking.ActivityLogsEventArgs&gt;(activityLogsEventHandler);
    ///         return server;
    ///     }
    /// 
    ///     private static dodSON.Core.Networking.IServer CreateNP_TunnellingRegistrationServer(dodSON.Core.Networking.IChannelAddress channelAddress,
    ///                                                                                         dodSON.Core.Networking.IServerConfiguration serverConfiguration,
    ///                                                                                         dodSON.Core.Networking.ITransportConfiguration transportConfiguration,
    ///                                                                                         dodSON.Core.Networking.IChallengeController challengeController,
    ///                                                                                         Action&lt;object, dodSON.Core.Networking.ActivityLogsEventArgs&gt; activityLogsEventHandler,
    ///                                                                                         string logSourceId)
    ///     {
    ///         // create registration controller
    ///         dodSON.Core.Networking.IRegistrationController registrationController = new dodSON.Core.Networking.RegistrationControllers.TunnellingRegistrationController(transportConfiguration, challengeController);
    ///         dodSON.Core.Networking.ITransportController serverTransportController = new dodSON.Core.Networking.TransportController(transportConfiguration, registrationController);
    ///         // create the server
    ///         dodSON.Core.Networking.IServer server = new dodSON.Core.Networking.NamedPipes.Server(channelAddress, serverConfiguration, serverTransportController, logSourceId);
    ///         server.ActivityLogsEvent += new EventHandler&lt;dodSON.Core.Networking.ActivityLogsEventArgs&gt;(activityLogsEventHandler);
    ///         return server;
    ///     }
    /// 
    ///     // HTTP 
    /// 
    ///     private static dodSON.Core.Networking.IServer CreateHTTP_NullRegistrationServer(dodSON.Core.Networking.ChannelAddress channelAddress,
    ///                                                                                     dodSON.Core.Networking.ServerConfiguration serverConfiguration,
    ///                                                                                     dodSON.Core.Networking.TransportConfiguration transportConfiguration,
    ///                                                                                     dodSON.Core.Networking.IChallengeController challengeController,
    ///                                                                                     Action&lt;object, dodSON.Core.Networking.ActivityLogsEventArgs&gt; activityLogsEventHandler,
    ///                                                                                     string logSourceId)
    ///     {
    ///         // create the server
    ///         dodSON.Core.Networking.IRegistrationController registrationController = new dodSON.Core.Networking.RegistrationControllers.NullRegistrationController(transportConfiguration, challengeController);
    ///         dodSON.Core.Networking.ITransportController serverTransportController = new dodSON.Core.Networking.TransportController(transportConfiguration, registrationController);
    ///         dodSON.Core.Networking.IServer server = new dodSON.Core.Networking.Http.Server(channelAddress, serverConfiguration, serverTransportController, logSourceId);
    ///         server.ActivityLogsEvent += new EventHandler&lt;dodSON.Core.Networking.ActivityLogsEventArgs&gt;(activityLogsEventHandler);
    ///         return server;
    ///     }
    /// 
    ///     private static dodSON.Core.Networking.IServer CreateHTTP_TunnellingRegistrationServer(dodSON.Core.Networking.IChannelAddress channelAddress,
    ///                                                                                           dodSON.Core.Networking.IServerConfiguration serverConfiguration,
    ///                                                                                           dodSON.Core.Networking.ITransportConfiguration transportConfiguration,
    ///                                                                                           dodSON.Core.Networking.IChallengeController challengeController,
    ///                                                                                           Action&lt;object, dodSON.Core.Networking.ActivityLogsEventArgs&gt; activityLogsEventHandler,
    ///                                                                                           string logSourceId)
    ///     {
    ///         // create registration controller
    ///         dodSON.Core.Networking.IRegistrationController registrationController = new dodSON.Core.Networking.RegistrationControllers.TunnellingRegistrationController(transportConfiguration, challengeController);
    ///         dodSON.Core.Networking.ITransportController serverTransportController = new dodSON.Core.Networking.TransportController(transportConfiguration, registrationController);
    ///         // create the server
    ///         dodSON.Core.Networking.IServer server = new dodSON.Core.Networking.Http.Server(channelAddress, serverConfiguration, serverTransportController, logSourceId);
    ///         server.ActivityLogsEvent += new EventHandler&lt;dodSON.Core.Networking.ActivityLogsEventArgs&gt;(activityLogsEventHandler);
    ///         return server;
    ///     }
    /// 
    ///     // ################################################################
    ///     // ######## CLIENTS
    ///     // ################################################################
    /// 
    ///     // NAMED PIPES
    /// 
    ///     private static dodSON.Core.Networking.IClient CreateNP_Client(string id,
    ///                                                                   dodSON.Core.Networking.IChannelAddress channelAddress,
    ///                                                                   dodSON.Core.Networking.IRegistrationController registrationController,
    ///                                                                   bool connectToSharedMessageBus)
    ///     {
    ///         // create client configuration
    ///         bool recieveSelfSentMessages = false;
    ///         List&lt;dodSON.Core.Networking.IPayloadTypeInfo&gt; recievableAndTransmittableTypesFilter = new List&lt;dodSON.Core.Networking.IPayloadTypeInfo&gt;() { new dodSON.Core.Networking.PayloadTypeInfo(typeof(string)) };
    ///         dodSON.Core.Networking.IClientConfiguration configuration = new dodSON.Core.Networking.ClientConfiguration(id, recieveSelfSentMessages, recievableAndTransmittableTypesFilter, recievableAndTransmittableTypesFilter);
    ///         // create client
    ///         dodSON.Core.Networking.IClient client = new dodSON.Core.Networking.NamedPipes.Client(channelAddress, configuration, registrationController);
    ///         if (connectToSharedMessageBus)
    ///         {
    ///             client.MessageBus += SharedClient_MessageBus;
    ///         }
    ///         return client;
    ///     }
    /// 
    ///     // HTTP 
    /// 
    ///     private static dodSON.Core.Networking.IClient CreateHTTP_Client(string id,
    ///                                                                     dodSON.Core.Networking.IChannelAddress channelAddress,
    ///                                                                     dodSON.Core.Networking.IRegistrationController registrationController,
    ///                                                                     bool connectToSharedMessageBus)
    ///     {
    ///         // create client configuration
    ///         bool recieveSelfSentMessages = false;
    ///         List&lt;dodSON.Core.Networking.IPayloadTypeInfo&gt; recievableAndTransmittableTypesFilter = new List&lt;dodSON.Core.Networking.IPayloadTypeInfo&gt;() { new dodSON.Core.Networking.PayloadTypeInfo(typeof(string)) };
    ///         dodSON.Core.Networking.IClientConfiguration configuration = new dodSON.Core.Networking.ClientConfiguration(id, recieveSelfSentMessages, recievableAndTransmittableTypesFilter, recievableAndTransmittableTypesFilter);
    ///         // create client
    ///         dodSON.Core.Networking.IClient client = new dodSON.Core.Networking.Http.Client(channelAddress, configuration, registrationController);
    ///         if (connectToSharedMessageBus)
    ///         {
    ///             client.MessageBus += SharedClient_MessageBus;
    ///         }
    ///         return client;
    ///     }
    /// 
    ///     // --------------------------------------------------------------------------------        
    /// 
    ///     private static void SharedClient_MessageBus(object sender, dodSON.Core.Networking.MessageEventArgs e)
    ///     {
    ///         if (e.Message.TypeInfo.TypeName == typeof(string).AssemblyQualifiedName)
    ///         {
    ///             dodSON.Core.Networking.IClient senderAsClient = sender as dodSON.Core.Networking.IClient;
    ///             ClientLog.Write(dodSON.Core.Logging.LogEntryType.Information, senderAsClient?.Id, e.Message.PayloadMessage&lt;string&gt;());
    ///         }
    ///     }
    /// 
    ///     // --------------------------------------------------------------------------------  
    /// 
    ///     private static void RefreshDisplay(DateTimeOffset startTime,
    ///                                        dodSON.Core.Networking.IServer server,
    ///                                        string serverLogFilename,
    ///                                        string clientLogFilename)
    ///     {
    ///         Console.Clear();
    ///         Console.WriteLine("Networking Example");
    ///         Console.WriteLine("dodSON Software Core Library");
    ///         Console.WriteLine();
    ///         Console.WriteLine($"Server Log={serverLogFilename}");
    ///         Console.WriteLine($"Client Log={clientLogFilename}");
    ///         Console.WriteLine();
    ///         DisplayNetworkStats(startTime, server);
    ///         Console.WriteLine();
    ///         Console.WriteLine("press [F1]=Ping");
    ///         Console.WriteLine("press [F4]=Restart Clients");
    ///         Console.WriteLine("press [F5]=Send Message to all Clients");
    ///         Console.WriteLine("press [Esc]=Exit");
    ///     }
    /// 
    ///     // -------------------------------------------------------------------------------- 
    /// 
    ///     private static long _LastServerIncomingBytes;
    ///     private static long _LastServerOutgoingBytes;
    ///     private static long _LastServerIncomingEnvelopes;
    ///     private static long _LastServerOutgoingEnvelopes;
    ///     private static DateTime _LastDisplayEvent = DateTime.Now;
    /// 
    ///     private class ClientStatsInformation
    ///     {
    ///         public long LastIncomingBytes;
    ///         public long LastIncomingEnvelopes;
    ///         public long LastIncomingMessages;
    ///         public long LastOutgoingBytes;
    ///         public long LastOutgoingEnvelopes;
    ///         public long LastOutgoingMessages;
    ///     }
    /// 
    ///     private static Dictionary&lt;string, ClientStatsInformation&gt; _ClientStatsInfoList = new Dictionary&lt;string, ClientStatsInformation&gt;();
    /// 
    ///     private static void DisplayNetworkStats(DateTimeOffset startTime, dodSON.Core.Networking.IServer server)
    ///     {
    ///         string postPadding = "                     ";
    ///         dodSON.Core.Networking.ITransportStatisticsGroup allStats = server.RequestAllClientsTransportStatistics();
    ///         TimeSpan forDuration = DateTime.Now - _LastDisplayEvent;
    /// 
    ///         Console.WriteLine($"Uri     = {server.AddressUri}");
    ///         Console.WriteLine($"Runtime = {DateTimeOffset.Now - startTime}");
    ///         Console.WriteLine($"{Environment.NewLine}--------------------------------{Environment.NewLine}");
    ///         // 
    ///         Console.WriteLine($"Server Incoming:");
    ///         double incomingEnvelopesPerSecond = allStats.ServerStatistics.IncomingAverageEnvelopesPerSecond(_LastServerIncomingEnvelopes, forDuration);
    ///         Console.WriteLine($"    Envelopes = {allStats.ServerStatistics.IncomingEnvelopes}, envelopes/second = {incomingEnvelopesPerSecond:N2}{postPadding}");
    ///         double incomingBytesPerSecond = allStats.ServerStatistics.IncomingAverageBytesPerSecond(_LastServerIncomingBytes, forDuration);
    ///         Console.WriteLine($"    Bytes     = {dodSON.Core.Common.ByteCountHelper.ToString(allStats.ServerStatistics.IncomingBytes)}, Bytes/second = {dodSON.Core.Common.ByteCountHelper.ToString((long)incomingBytesPerSecond)} ({incomingBytesPerSecond:N2}){postPadding}");
    ///         Console.WriteLine($"Server Outgoing:");
    ///         double outgoingEnvelopesPerSecond = allStats.ServerStatistics.OutgoingAverageEnvelopesPerSecond(_LastServerOutgoingEnvelopes, forDuration);
    ///         Console.WriteLine($"    Envelopes = {allStats.ServerStatistics.OutgoingEnvelopes}, envelopes/second = {outgoingEnvelopesPerSecond:N2}{postPadding}");
    ///         double outgoingBytesPerSecond = allStats.ServerStatistics.OutgoingAverageBytesPerSecond(_LastServerOutgoingBytes, forDuration);
    ///         Console.WriteLine($"    Bytes     = {dodSON.Core.Common.ByteCountHelper.ToString(allStats.ServerStatistics.OutgoingBytes)}, Bytes/second = {dodSON.Core.Common.ByteCountHelper.ToString((long)outgoingBytesPerSecond)} ({outgoingBytesPerSecond:N2}){postPadding}");
    ///         // 
    ///         _LastDisplayEvent = DateTime.Now;
    ///         _LastServerIncomingEnvelopes = allStats.ServerStatistics.IncomingEnvelopes;
    ///         _LastServerOutgoingEnvelopes = allStats.ServerStatistics.OutgoingEnvelopes;
    ///         _LastServerIncomingBytes = allStats.ServerStatistics.IncomingBytes;
    ///         _LastServerOutgoingBytes = allStats.ServerStatistics.OutgoingBytes;
    ///         // 
    ///         foreach (dodSON.Core.Networking.ITransportStatistics client in allStats.AllClientsStatistics)
    ///         {
    ///             ClientStatsInformation clientStatsInfo = new ClientStatsInformation();
    ///             if (_ClientStatsInfoList.ContainsKey(client.ClientServerId))
    ///             {
    ///                 clientStatsInfo = _ClientStatsInfoList[client.ClientServerId];
    ///             }
    ///             else
    ///             {
    ///                 _ClientStatsInfoList.Add(client.ClientServerId, clientStatsInfo);
    ///             }
    ///             // 
    ///             Console.WriteLine();
    ///             Console.WriteLine($"{client.ClientServerId} Incoming:");
    ///             double clientIncomingMessagesPerSecond = client.IncomingAverageMessagesPerSecond(clientStatsInfo.LastIncomingMessages, forDuration);
    ///             Console.WriteLine($"    Messages  = {client.IncomingMessages}, messages/second = {clientIncomingMessagesPerSecond:N2}{postPadding}");
    ///             double clientIncomingEnvelopesPerSecond = client.IncomingAverageEnvelopesPerSecond(clientStatsInfo.LastIncomingEnvelopes, forDuration);
    ///             Console.WriteLine($"    Envelopes = {client.IncomingEnvelopes}, envelopes/second = {clientIncomingEnvelopesPerSecond:N2}{postPadding}");
    ///             double clientIncomingBytesPerSecond = client.IncomingAverageBytesPerSecond(clientStatsInfo.LastIncomingBytes, forDuration);
    ///             Console.WriteLine($"    Bytes     = {dodSON.Core.Common.ByteCountHelper.ToString(client.IncomingBytes)}, Bytes/second = {dodSON.Core.Common.ByteCountHelper.ToString((long)clientIncomingBytesPerSecond)} ({clientIncomingBytesPerSecond:N2}){postPadding}");
    ///             Console.WriteLine($"{client.ClientServerId} Outgoing:");
    ///             double clientOutgoingMessagesPerSecond = client.OutgoingAverageMessagesPerSecond(clientStatsInfo.LastOutgoingMessages, forDuration);
    ///             Console.WriteLine($"    Messages  = {client.OutgoingMessages}, messages/second = {clientOutgoingMessagesPerSecond:N2}{postPadding}");
    ///             double clientOutgoingEnvelopesPerSecond = client.OutgoingAverageEnvelopesPerSecond(clientStatsInfo.LastOutgoingEnvelopes, forDuration);
    ///             Console.WriteLine($"    Envelopes = {client.OutgoingEnvelopes}, envelopes/second = {clientOutgoingEnvelopesPerSecond:N2}{postPadding}");
    ///             double clientOutgoingBytesPerSecond = client.OutgoingAverageBytesPerSecond(clientStatsInfo.LastOutgoingBytes, forDuration);
    ///             Console.WriteLine($"    Bytes     = {dodSON.Core.Common.ByteCountHelper.ToString(client.OutgoingBytes)}, Bytes/seconds = {dodSON.Core.Common.ByteCountHelper.ToString((long)clientOutgoingBytesPerSecond)} ({clientOutgoingBytesPerSecond:N2}){postPadding}");
    ///             // 
    ///             clientStatsInfo.LastIncomingBytes = client.IncomingBytes;
    ///             clientStatsInfo.LastIncomingEnvelopes = client.IncomingEnvelopes;
    ///             clientStatsInfo.LastIncomingMessages = client.IncomingMessages;
    ///             clientStatsInfo.LastOutgoingBytes = client.OutgoingBytes;
    ///             clientStatsInfo.LastOutgoingEnvelopes = client.OutgoingEnvelopes;
    ///             clientStatsInfo.LastOutgoingMessages = client.OutgoingMessages;
    ///         }
    ///         Console.WriteLine($"{Environment.NewLine}--------------------------------");
    ///     }
    /// }
    /// </code>
    /// <para>Final Screen Shot.</para>
    /// <code>
    /// // Networking Example
    /// // dodSON Software Core Library
    /// // 
    /// // Server Log=C:\(WORKING)\Dev\Networking2\ServerLog.txt
    /// // Client Log=C:\(WORKING)\Dev\Networking2\ClientLog.txt
    /// // 
    /// // Uri     = http://localhost:50000/ServerRS
    /// // Runtime = 00:04:02.0950000
    /// // 
    /// // --------------------------------
    /// // 
    /// // Server Incoming:
    /// //     Envelopes = 940, envelopes/second = 0.00
    /// //     Bytes     = 705 KB, Bytes/second = 0 bytes (0.00)
    /// // Server Outgoing:
    /// //     Envelopes = 950, envelopes/second = 0.00
    /// //     Bytes     = 713 KB, Bytes/second = 0 bytes (0.00)
    /// // 
    /// // ServerRS_Client1 Incoming:
    /// //     Messages  = 2, messages/second = 0.00
    /// //     Envelopes = 2, envelopes/second = 0.00
    /// //     Bytes     = 2 KB, Bytes/second = 0 bytes (0.00)
    /// // ServerRS_Client1 Outgoing:
    /// //     Messages  = 0, messages/second = 0.00
    /// //     Envelopes = 0, envelopes/second = 0.00
    /// //     Bytes     = 0 bytes, Bytes/seconds = 0 bytes (0.00)
    /// // 
    /// // Bridge_Server1_ServerRS_Connection2 Incoming:
    /// //     Messages  = 469, messages/second = 0.00
    /// //     Envelopes = 469, envelopes/second = 0.00
    /// //     Bytes     = 352 KB, Bytes/second = 0 bytes (0.00)
    /// // Bridge_Server1_ServerRS_Connection2 Outgoing:
    /// //     Messages  = 469, messages/second = 0.00
    /// //     Envelopes = 469, envelopes/second = 0.00
    /// //     Bytes     = 352 KB, Bytes/seconds = 0 bytes (0.00)
    /// // 
    /// // Bridge_Server2_ServerRS_Connection2 Incoming:
    /// //     Messages  = 4, messages/second = 0.00
    /// //     Envelopes = 4, envelopes/second = 0.00
    /// //     Bytes     = 3 KB, Bytes/second = 0 bytes (0.00)
    /// // Bridge_Server2_ServerRS_Connection2 Outgoing:
    /// //     Messages  = 1, messages/second = 0.00
    /// //     Envelopes = 1, envelopes/second = 0.00
    /// //     Bytes     = 768 bytes, Bytes/seconds = 0 bytes (0.00)
    /// // 
    /// // Bridge_Server3_ServerRS_Connection2 Incoming:
    /// //     Messages  = 236, messages/second = 0.00
    /// //     Envelopes = 236, envelopes/second = 0.00
    /// //     Bytes     = 177 KB, Bytes/second = 0 bytes (0.00)
    /// // Bridge_Server3_ServerRS_Connection2 Outgoing:
    /// //     Messages  = 235, messages/second = 0.00
    /// //     Envelopes = 235, envelopes/second = 0.00
    /// //     Bytes     = 176 KB, Bytes/seconds = 0 bytes (0.00)
    /// // 
    /// // Bridge_Server4_ServerRS_Connection2 Incoming:
    /// //     Messages  = 2, messages/second = 0.00
    /// //     Envelopes = 2, envelopes/second = 0.00
    /// //     Bytes     = 2 KB, Bytes/second = 0 bytes (0.00)
    /// // Bridge_Server4_ServerRS_Connection2 Outgoing:
    /// //     Messages  = 0, messages/second = 0.00
    /// //     Envelopes = 0, envelopes/second = 0.00
    /// //     Bytes     = 0 bytes, Bytes/seconds = 0 bytes (0.00)
    /// // 
    /// // Bridge_Server5_ServerRS_Connection2 Incoming:
    /// //     Messages  = 235, messages/second = 0.00
    /// //     Envelopes = 235, envelopes/second = 0.00
    /// //     Bytes     = 176 KB, Bytes/second = 0 bytes (0.00)
    /// // Bridge_Server5_ServerRS_Connection2 Outgoing:
    /// //     Messages  = 235, messages/second = 0.00
    /// //     Envelopes = 235, envelopes/second = 0.00
    /// //     Bytes     = 176 KB, Bytes/seconds = 0 bytes (0.00)
    /// // 
    /// // --------------------------------
    /// // 
    /// // press [F1]=Ping
    /// // press [F4]=Restart Clients
    /// // press [F5]=Send Message to all Clients
    /// // press [Esc]=Exit
    /// // 
    /// // Please Standby...
    /// // 
    /// // Closing All Clients
    /// // 
    /// // Closing All Bridges
    /// //     Closing Server1 to ServerRS
    /// //     Closing Server2 to ServerRS
    /// //     Closing Server3 to ServerRS
    /// //     Closing Server4 to ServerRS
    /// //     Closing Server5 to ServerRS
    /// // 
    /// // Closing All Servers
    /// //     Closing ServerRS
    /// //     Closing Server1
    /// //     Closing Server2
    /// //     Closing Server3
    /// //     Closing Server4
    /// //     Closing Server5
    /// // 
    /// // ================================
    /// // press anykey&gt;
    /// </code>
    /// <para>The Server Log.</para>
    /// <code>
    /// // 2018-09-19 10:21:31 PM -05:00; Information; 0; 0; Network; Opening Server, (dodSON.Core.Networking.Http.Server, dodSON.Core, v1.1.0.0)
    /// // 2018-09-19 10:21:31 PM -05:00; Information; 0; 0; Network; Server Id=ServerRS
    /// // 2018-09-19 10:21:31 PM -05:00; Information; 0; 0; Network; Type=[dodSON.Core.Networking.Http.Server, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null]
    /// // 2018-09-19 10:21:31 PM -05:00; Information; 0; 0; Network; Uri=http://localhost:50000/ServerRS
    /// // 2018-09-19 10:21:31 PM -05:00; Information; 0; 0; Network; IP Address=localhost, Name=ServerRS, Port=50000
    /// // 2018-09-19 10:21:31 PM -05:00; Information; 0; 0; Network; Registering Client=ServerInternalClient_14eeaf18-e0d3-46a0-8e4d-25ddodSONb94
    /// // 2018-09-19 10:21:31 PM -05:00; Information; 0; 0; Network; Receive Own Messages=True
    /// // 2018-09-19 10:21:31 PM -05:00; Information; 0; 0; Network; Receivable Types: (0)
    /// // 2018-09-19 10:21:31 PM -05:00; Information; 0; 0; Network; Transmittable Types: (0)
    /// // 2018-09-19 10:21:31 PM -05:00; Information; 0; 0; Network; Completed Registering Client=ServerInternalClient_14eeaf18-e0d3-46a0-8e4d-25ddodSONb94
    /// // 2018-09-19 10:21:31 PM -05:00; Information; 0; 0; Network; Server Opened Successfully. Elapsed Time=00:00:00.4307263
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Registering Client=ServerRS_Client1
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Receive Own Messages=False
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Receivable Types: (1)
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Transmittable Types: (1)
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Completed Registering Client=ServerRS_Client1
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Opening Server, (dodSON.Core.Networking.NamedPipes.Server, dodSON.Core, v1.1.0.0)
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Server Id=Server1
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Type=[dodSON.Core.Networking.NamedPipes.Server, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null]
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Uri=net.pipe://localhost/Server1-49152
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; IP Address=localhost, Name=Server1, Port=49152
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Registering Client=ServerInternalClient_53e6ff5d-d55b-4df3-9b28-840dodSON01b
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Receive Own Messages=True
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Receivable Types: (0)
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Transmittable Types: (0)
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Completed Registering Client=ServerInternalClient_53e6ff5d-d55b-4df3-9b28-840dodSON01b
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Server Opened Successfully. Elapsed Time=00:00:00.2381787
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Registering Client=Server1_Client1
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Receive Own Messages=False
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Receivable Types: (1)
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Transmittable Types: (1)
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:32 PM -05:00; Information; 0; 0; Network; Completed Registering Client=Server1_Client1
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Registering Client=Bridge_Server1_ServerRS_Connection1
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Receive Own Messages=False
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Receivable Types: (1)
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Transmittable Types: (1)
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Completed Registering Client=Bridge_Server1_ServerRS_Connection1
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Registering Client=Bridge_Server1_ServerRS_Connection2
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Receive Own Messages=False
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Receivable Types: (1)
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Transmittable Types: (1)
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Completed Registering Client=Bridge_Server1_ServerRS_Connection2
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Opening Server, (dodSON.Core.Networking.NamedPipes.Server, dodSON.Core, v1.1.0.0)
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Server Id=Server2
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Type=[dodSON.Core.Networking.NamedPipes.Server, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null]
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Uri=net.pipe://localhost/Server2-49152
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; IP Address=localhost, Name=Server2, Port=49152
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Registering Client=ServerInternalClient_ee658438-a76a-4aff-a767-08ddodSONbda
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Receive Own Messages=True
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Receivable Types: (0)
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Transmittable Types: (0)
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Completed Registering Client=ServerInternalClient_ee658438-a76a-4aff-a767-08ddodSONbda
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Server Opened Successfully. Elapsed Time=00:00:00.1828365
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Registering Client=Server2_Client1
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Receive Own Messages=False
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Receivable Types: (1)
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Transmittable Types: (1)
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Completed Registering Client=Server2_Client1
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Registering Client=Bridge_Server2_ServerRS_Connection1
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Receive Own Messages=False
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Receivable Types: (1)
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Transmittable Types: (1)
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:33 PM -05:00; Information; 0; 0; Network; Completed Registering Client=Bridge_Server2_ServerRS_Connection1
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Registering Client=Bridge_Server2_ServerRS_Connection2
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Receive Own Messages=False
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Receivable Types: (1)
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Transmittable Types: (1)
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Completed Registering Client=Bridge_Server2_ServerRS_Connection2
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Opening Server, (dodSON.Core.Networking.NamedPipes.Server, dodSON.Core, v1.1.0.0)
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Server Id=Server3
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Type=[dodSON.Core.Networking.NamedPipes.Server, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null]
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Uri=net.pipe://localhost/Server3-49152
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; IP Address=localhost, Name=Server3, Port=49152
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Registering Client=ServerInternalClient_bbae0ee3-a220-4c5f-a4be-1ffdodSONb75
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Receive Own Messages=True
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Receivable Types: (0)
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Transmittable Types: (0)
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Completed Registering Client=ServerInternalClient_bbae0ee3-a220-4c5f-a4be-1ffdodSONb75
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Server Opened Successfully. Elapsed Time=00:00:00.1973134
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Registering Client=Server3_Client1
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Receive Own Messages=False
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Receivable Types: (1)
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Transmittable Types: (1)
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Completed Registering Client=Server3_Client1
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Registering Client=Bridge_Server3_ServerRS_Connection1
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Receive Own Messages=False
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Receivable Types: (1)
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Transmittable Types: (1)
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:34 PM -05:00; Information; 0; 0; Network; Completed Registering Client=Bridge_Server3_ServerRS_Connection1
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Registering Client=Bridge_Server3_ServerRS_Connection2
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Receive Own Messages=False
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Receivable Types: (1)
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Transmittable Types: (1)
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Completed Registering Client=Bridge_Server3_ServerRS_Connection2
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Opening Server, (dodSON.Core.Networking.NamedPipes.Server, dodSON.Core, v1.1.0.0)
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Server Id=Server4
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Type=[dodSON.Core.Networking.NamedPipes.Server, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null]
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Uri=net.pipe://localhost/Server4-49152
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; IP Address=localhost, Name=Server4, Port=49152
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Registering Client=ServerInternalClient_726464e2-a061-498e-a9b3-407dodSONd1a
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Receive Own Messages=True
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Receivable Types: (0)
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Transmittable Types: (0)
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Completed Registering Client=ServerInternalClient_726464e2-a061-498e-a9b3-407dodSONd1a
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Server Opened Successfully. Elapsed Time=00:00:00.1833014
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Registering Client=Server4_Client1
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Receive Own Messages=False
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Receivable Types: (1)
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Transmittable Types: (1)
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Completed Registering Client=Server4_Client1
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Registering Client=Bridge_Server4_ServerRS_Connection1
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Receive Own Messages=False
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Receivable Types: (1)
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Transmittable Types: (1)
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Completed Registering Client=Bridge_Server4_ServerRS_Connection1
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Registering Client=Bridge_Server4_ServerRS_Connection2
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Receive Own Messages=False
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Receivable Types: (1)
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Transmittable Types: (1)
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Completed Registering Client=Bridge_Server4_ServerRS_Connection2
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Opening Server, (dodSON.Core.Networking.NamedPipes.Server, dodSON.Core, v1.1.0.0)
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Server Id=Server5
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Type=[dodSON.Core.Networking.NamedPipes.Server, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null]
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; Uri=net.pipe://localhost/Server5-49152
    /// // 2018-09-19 10:21:35 PM -05:00; Information; 0; 0; Network; IP Address=localhost, Name=Server5, Port=49152
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Registering Client=ServerInternalClient_e1c0190a-c2f0-4ba0-a721-edbdodSON7a1
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Receive Own Messages=True
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Receivable Types: (0)
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Transmittable Types: (0)
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Completed Registering Client=ServerInternalClient_e1c0190a-c2f0-4ba0-a721-edbdodSON7a1
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Server Opened Successfully. Elapsed Time=00:00:00.2230882
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Registering Client=Server5_Client1
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Receive Own Messages=False
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Receivable Types: (1)
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Transmittable Types: (1)
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Completed Registering Client=Server5_Client1
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Registering Client=Bridge_Server5_ServerRS_Connection1
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Receive Own Messages=False
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Receivable Types: (1)
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Transmittable Types: (1)
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Completed Registering Client=Bridge_Server5_ServerRS_Connection1
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Registering Client=Bridge_Server5_ServerRS_Connection2
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Receive Own Messages=False
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Receivable Types: (1)
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Transmittable Types: (1)
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; #1=System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; Network; Completed Registering Client=Bridge_Server5_ServerRS_Connection2
    /// // 2018-09-19 10:24:34 PM -05:00; Information; 0; 0; Network; Pinging All Clients: (7)
    /// // 2018-09-19 10:24:34 PM -05:00; Information; 0; 0; Network; #1=ServerInternalClient_14eeaf18-e0d3-46a0-8e4d-25ddodSONb94, Round Trip=00:00:00.0035648, Date Started=2018-09-19 10:21:31 PM -05:00, Runtime=00:03:02.9724657
    /// // 2018-09-19 10:24:34 PM -05:00; Information; 0; 0; Network; #2=ServerRS_Client1, Round Trip=00:00:00.0016645, Date Started=2018-09-19 10:21:31 PM -05:00, Runtime=00:03:02.6488992
    /// // 2018-09-19 10:24:34 PM -05:00; Information; 0; 0; Network; #3=Bridge_Server1_ServerRS_Connection2, Round Trip=00:00:00.0015700, Date Started=2018-09-19 10:21:33 PM -05:00, Runtime=00:03:01.6379859
    /// // 2018-09-19 10:24:34 PM -05:00; Information; 0; 0; Network; #4=Bridge_Server2_ServerRS_Connection2, Round Trip=00:00:00.0016023, Date Started=2018-09-19 10:21:33 PM -05:00, Runtime=00:03:00.7479996
    /// // 2018-09-19 10:24:34 PM -05:00; Information; 0; 0; Network; #5=Bridge_Server3_ServerRS_Connection2, Round Trip=00:00:00.0022148, Date Started=2018-09-19 10:21:34 PM -05:00, Runtime=00:02:59.8200022
    /// // 2018-09-19 10:24:34 PM -05:00; Information; 0; 0; Network; #6=Bridge_Server4_ServerRS_Connection2, Round Trip=00:00:00.0020542, Date Started=2018-09-19 10:21:35 PM -05:00, Runtime=00:02:58.9790039
    /// // 2018-09-19 10:24:34 PM -05:00; Information; 0; 0; Network; #7=Bridge_Server5_ServerRS_Connection2, Round Trip=00:00:00.0019062, Date Started=2018-09-19 10:21:36 PM -05:00, Runtime=00:02:58.0230000
    /// // 2018-09-19 10:24:34 PM -05:00; Information; 0; 0; Network; Completed Pinging All Clients.
    /// // 2018-09-19 10:25:40 PM -05:00; Information; 0; 0; Network; Unregistering Client=ServerRS_Client1, Date Started=2018-09-19 10:21:32 PM, Runtime=00:04:08.7385456
    /// // 2018-09-19 10:25:41 PM -05:00; Information; 0; 0; Network; Unregistering Client=Bridge_Server2_ServerRS_Connection2, Date Started=2018-09-19 10:21:34 PM, Runtime=00:04:06.9126322
    /// // 2018-09-19 10:25:41 PM -05:00; Information; 0; 0; Network; Unregistering Client=Bridge_Server1_ServerRS_Connection2, Date Started=2018-09-19 10:21:33 PM, Runtime=00:04:07.8036457
    /// // 2018-09-19 10:25:41 PM -05:00; Information; 0; 0; Network; Unregistering Client=Bridge_Server3_ServerRS_Connection2, Date Started=2018-09-19 10:21:35 PM, Runtime=00:04:06.0446472
    /// // 2018-09-19 10:25:41 PM -05:00; Information; 0; 0; Network; Unregistering Client=Bridge_Server4_ServerRS_Connection2, Date Started=2018-09-19 10:21:35 PM, Runtime=00:04:05.1896463
    /// // 2018-09-19 10:25:41 PM -05:00; Information; 0; 0; Network; Unregistering Client=Bridge_Server5_ServerRS_Connection2, Date Started=2018-09-19 10:21:36 PM, Runtime=00:04:04.3366471
    /// // 2018-09-19 10:25:40 PM -05:00; Information; 0; 0; Network; Closing Clients: (7)
    /// // 2018-09-19 10:25:41 PM -05:00; Information; 0; 0; Network; Completed Closing Clients.
    /// // 2018-09-19 10:25:41 PM -05:00; Information; 0; 0; Network; Unregistering Client=Bridge_Server1_ServerRS_Connection1, Date Started=2018-09-19 10:21:33 PM, Runtime=00:04:08.8656098
    /// // 2018-09-19 10:25:41 PM -05:00; Information; 0; 0; Network; Unregistering Client=Server1_Client1, Date Started=2018-09-19 10:21:32 PM, Runtime=00:04:09.1275251
    /// // 2018-09-19 10:25:41 PM -05:00; Information; 0; 0; Network; Closing Clients: (3)
    /// // 2018-09-19 10:25:42 PM -05:00; Information; 0; 0; Network; Completed Closing Clients.
    /// // 2018-09-19 10:25:42 PM -05:00; Information; 0; 0; Network; Unregistering Client=Server2_Client1, Date Started=2018-09-19 10:21:33 PM, Runtime=00:04:09.1852890
    /// // 2018-09-19 10:25:42 PM -05:00; Information; 0; 0; Network; Unregistering Client=Bridge_Server2_ServerRS_Connection1, Date Started=2018-09-19 10:21:33 PM, Runtime=00:04:08.9723015
    /// // 2018-09-19 10:25:42 PM -05:00; Information; 0; 0; Network; Closing Clients: (3)
    /// // 2018-09-19 10:25:43 PM -05:00; Information; 0; 0; Network; Completed Closing Clients.
    /// // 2018-09-19 10:25:43 PM -05:00; Information; 0; 0; Network; Unregistering Client=Server3_Client1, Date Started=2018-09-19 10:21:34 PM, Runtime=00:04:09.2188933
    /// // 2018-09-19 10:25:43 PM -05:00; Information; 0; 0; Network; Unregistering Client=Bridge_Server3_ServerRS_Connection1, Date Started=2018-09-19 10:21:34 PM, Runtime=00:04:08.9978773
    /// // 2018-09-19 10:25:43 PM -05:00; Information; 0; 0; Network; Closing Clients: (3)
    /// // 2018-09-19 10:25:44 PM -05:00; Information; 0; 0; Network; Completed Closing Clients.
    /// // 2018-09-19 10:25:44 PM -05:00; Information; 0; 0; Network; Unregistering Client=Bridge_Server4_ServerRS_Connection1, Date Started=2018-09-19 10:21:35 PM, Runtime=00:04:09.1334277
    /// // 2018-09-19 10:25:44 PM -05:00; Information; 0; 0; Network; Unregistering Client=Server4_Client1, Date Started=2018-09-19 10:21:35 PM, Runtime=00:04:09.3829380
    /// // 2018-09-19 10:25:44 PM -05:00; Information; 0; 0; Network; Closing Clients: (3)
    /// // 2018-09-19 10:25:45 PM -05:00; Information; 0; 0; Network; Completed Closing Clients.
    /// // 2018-09-19 10:25:45 PM -05:00; Information; 0; 0; Network; Unregistering Client=Server5_Client1, Date Started=2018-09-19 10:21:36 PM, Runtime=00:04:09.3938278
    /// // 2018-09-19 10:25:45 PM -05:00; Information; 0; 0; Network; Unregistering Client=Bridge_Server5_ServerRS_Connection1, Date Started=2018-09-19 10:21:36 PM, Runtime=00:04:09.1938141
    /// // 2018-09-19 10:25:45 PM -05:00; Information; 0; 0; Network; Closing Clients: (3)
    /// // 2018-09-19 10:25:46 PM -05:00; Information; 0; 0; Network; Completed Closing Clients.
    /// // 2018-09-19 10:25:46 PM -05:00; Information; 0; 0; Network; Closing Server, (dodSON.Core.Networking.Http.Server, dodSON.Core, v1.1.0.0)
    /// // 2018-09-19 10:25:46 PM -05:00; Information; 0; 0; Network; Closing All Clients: (1)
    /// // 2018-09-19 10:25:47 PM -05:00; Information; 0; 0; Network; Unregistering Client=ServerInternalClient_14eeaf18-e0d3-46a0-8e4d-25ddodSONb94, Date Started=2018-09-19 10:21:31 PM, Runtime=00:04:15.7465090
    /// // 2018-09-19 10:25:47 PM -05:00; Information; 0; 0; Network; Shutting Down Server, Id=ServerRS
    /// // 2018-09-19 10:25:47 PM -05:00; Information; 0; 0; Network; Total Incoming Bytes=707 KB (723,472)
    /// // 2018-09-19 10:25:47 PM -05:00; Information; 0; 0; Network; Total Incoming Envelopes=942
    /// // 2018-09-19 10:25:47 PM -05:00; Information; 0; 0; Network; Total Outgoing Bytes=714 KB (731,152)
    /// // 2018-09-19 10:25:47 PM -05:00; Information; 0; 0; Network; Total Outgoing Envelopes=952
    /// // 2018-09-19 10:25:47 PM -05:00; Information; 0; 0; Network; Server Closed Successfully.
    /// // 2018-09-19 10:25:47 PM -05:00; Information; 0; 0; Network; Closing Server, (dodSON.Core.Networking.NamedPipes.Server, dodSON.Core, v1.1.0.0)
    /// // 2018-09-19 10:25:47 PM -05:00; Information; 0; 0; Network; Closing All Clients: (1)
    /// // 2018-09-19 10:25:48 PM -05:00; Information; 0; 0; Network; Unregistering Client=ServerInternalClient_53e6ff5d-d55b-4df3-9b28-840dodSON01b, Date Started=2018-09-19 10:21:32 PM, Runtime=00:04:16.3628075
    /// // 2018-09-19 10:25:48 PM -05:00; Information; 0; 0; Network; Shutting Down Server, Id=Server1
    /// // 2018-09-19 10:25:48 PM -05:00; Information; 0; 0; Network; Total Incoming Bytes=733 KB (750,224)
    /// // 2018-09-19 10:25:48 PM -05:00; Information; 0; 0; Network; Total Incoming Envelopes=940
    /// // 2018-09-19 10:25:48 PM -05:00; Information; 0; 0; Network; Total Outgoing Bytes=734 KB (751,744)
    /// // 2018-09-19 10:25:48 PM -05:00; Information; 0; 0; Network; Total Outgoing Envelopes=942
    /// // 2018-09-19 10:25:48 PM -05:00; Information; 0; 0; Network; Server Closed Successfully.
    /// // 2018-09-19 10:25:48 PM -05:00; Information; 0; 0; Network; Closing Server, (dodSON.Core.Networking.NamedPipes.Server, dodSON.Core, v1.1.0.0)
    /// // 2018-09-19 10:25:48 PM -05:00; Information; 0; 0; Network; Closing All Clients: (1)
    /// // 2018-09-19 10:25:50 PM -05:00; Information; 0; 0; Network; Unregistering Client=ServerInternalClient_ee658438-a76a-4aff-a767-08ddodSONbda, Date Started=2018-09-19 10:21:33 PM, Runtime=00:04:16.6007720
    /// // 2018-09-19 10:25:50 PM -05:00; Information; 0; 0; Network; Shutting Down Server, Id=Server2
    /// // 2018-09-19 10:25:50 PM -05:00; Information; 0; 0; Network; Total Incoming Bytes=4 KB (3,920)
    /// // 2018-09-19 10:25:50 PM -05:00; Information; 0; 0; Network; Total Incoming Envelopes=5
    /// // 2018-09-19 10:25:50 PM -05:00; Information; 0; 0; Network; Total Outgoing Bytes=5 KB (5,440)
    /// // 2018-09-19 10:25:50 PM -05:00; Information; 0; 0; Network; Total Outgoing Envelopes=7
    /// // 2018-09-19 10:25:50 PM -05:00; Information; 0; 0; Network; Server Closed Successfully.
    /// // 2018-09-19 10:25:50 PM -05:00; Information; 0; 0; Network; Closing Server, (dodSON.Core.Networking.NamedPipes.Server, dodSON.Core, v1.1.0.0)
    /// // 2018-09-19 10:25:50 PM -05:00; Information; 0; 0; Network; Closing All Clients: (1)
    /// // 2018-09-19 10:25:51 PM -05:00; Information; 0; 0; Network; Unregistering Client=ServerInternalClient_bbae0ee3-a220-4c5f-a4be-1ffdodSONb75, Date Started=2018-09-19 10:21:34 PM, Runtime=00:04:16.8828840
    /// // 2018-09-19 10:25:51 PM -05:00; Information; 0; 0; Network; Shutting Down Server, Id=Server3
    /// // 2018-09-19 10:25:51 PM -05:00; Information; 0; 0; Network; Total Incoming Bytes=368 KB (377,088)
    /// // 2018-09-19 10:25:51 PM -05:00; Information; 0; 0; Network; Total Incoming Envelopes=472
    /// // 2018-09-19 10:25:51 PM -05:00; Information; 0; 0; Network; Total Outgoing Bytes=370 KB (378,672)
    /// // 2018-09-19 10:25:51 PM -05:00; Information; 0; 0; Network; Total Outgoing Envelopes=474
    /// // 2018-09-19 10:25:51 PM -05:00; Information; 0; 0; Network; Server Closed Successfully.
    /// // 2018-09-19 10:25:51 PM -05:00; Information; 0; 0; Network; Closing Server, (dodSON.Core.Networking.NamedPipes.Server, dodSON.Core, v1.1.0.0)
    /// // 2018-09-19 10:25:51 PM -05:00; Information; 0; 0; Network; Closing All Clients: (1)
    /// // 2018-09-19 10:25:52 PM -05:00; Information; 0; 0; Network; Unregistering Client=ServerInternalClient_726464e2-a061-498e-a9b3-407dodSONd1a, Date Started=2018-09-19 10:21:35 PM, Runtime=00:04:17.1483039
    /// // 2018-09-19 10:25:52 PM -05:00; Information; 0; 0; Network; Shutting Down Server, Id=Server4
    /// // 2018-09-19 10:25:52 PM -05:00; Information; 0; 0; Network; Total Incoming Bytes=2 KB (1,584)
    /// // 2018-09-19 10:25:52 PM -05:00; Information; 0; 0; Network; Total Incoming Envelopes=2
    /// // 2018-09-19 10:25:52 PM -05:00; Information; 0; 0; Network; Total Outgoing Bytes=3 KB (3,168)
    /// // 2018-09-19 10:25:52 PM -05:00; Information; 0; 0; Network; Total Outgoing Envelopes=4
    /// // 2018-09-19 10:25:52 PM -05:00; Information; 0; 0; Network; Server Closed Successfully.
    /// // 2018-09-19 10:25:52 PM -05:00; Information; 0; 0; Network; Closing Server, (dodSON.Core.Networking.NamedPipes.Server, dodSON.Core, v1.1.0.0)
    /// // 2018-09-19 10:25:52 PM -05:00; Information; 0; 0; Network; Closing All Clients: (1)
    /// // 2018-09-19 10:25:53 PM -05:00; Information; 0; 0; Network; Unregistering Client=ServerInternalClient_e1c0190a-c2f0-4ba0-a721-edbdodSON7a1, Date Started=2018-09-19 10:21:36 PM, Runtime=00:04:17.3814600
    /// // 2018-09-19 10:25:53 PM -05:00; Information; 0; 0; Network; Shutting Down Server, Id=Server5
    /// // 2018-09-19 10:25:53 PM -05:00; Information; 0; 0; Network; Total Incoming Bytes=367 KB (376,288)
    /// // 2018-09-19 10:25:53 PM -05:00; Information; 0; 0; Network; Total Incoming Envelopes=471
    /// // 2018-09-19 10:25:53 PM -05:00; Information; 0; 0; Network; Total Outgoing Bytes=369 KB (377,872)
    /// // 2018-09-19 10:25:53 PM -05:00; Information; 0; 0; Network; Total Outgoing Envelopes=473
    /// // 2018-09-19 10:25:53 PM -05:00; Information; 0; 0; Network; Server Closed Successfully.
    /// </code>
    /// <para>The Client Log.</para>
    /// <code>
    /// // 2018-09-19 10:21:36 PM -05:00; Information; 0; 0; ServerRS_Client1; Message from Server1_Client1
    /// // 2018-09-19 10:21:37 PM -05:00; Information; 0; 0; Server4_Client1; Message from Server1_Client1
    /// // 2018-09-19 10:21:37 PM -05:00; Information; 0; 0; Server3_Client1; Message from Server1_Client1
    /// // 2018-09-19 10:21:37 PM -05:00; Information; 0; 0; Server2_Client1; Message from Server1_Client1
    /// // 2018-09-19 10:21:37 PM -05:00; Information; 0; 0; Server5_Client1; Message from Server1_Client1
    /// // 2018-09-19 10:21:37 PM -05:00; Information; 0; 0; Server3_Client1; TargetId=; ClientId=Server1_Client1,Bridge_Server1_ServerRS_Connection2,Bridge_Server3_ServerRS_Connection1
    /// // 2018-09-19 10:21:37 PM -05:00; Information; 0; 0; Server5_Client1; TargetId=; ClientId=Server1_Client1,Bridge_Server1_ServerRS_Connection2,Bridge_Server5_ServerRS_Connection1
    /// // 2018-09-19 10:21:37 PM -05:00; Information; 0; 0; Server1_Client1; Hello from Server3_Client1
    /// // 2018-09-19 10:21:38 PM -05:00; Information; 0; 0; Server1_Client1; TargetId=Server1_Client1; ClientId=Server3_Client1,Bridge_Server3_ServerRS_Connection2,Bridge_Server1_ServerRS_Connection1
    /// // 2018-09-19 10:21:38 PM -05:00; Information; 0; 0; Server1_Client1; Hello from Server5_Client1
    /// // 2018-09-19 10:21:38 PM -05:00; Information; 0; 0; Server3_Client1; Hello from Server1_Client1
    /// // 2018-09-19 10:21:38 PM -05:00; Information; 0; 0; Server1_Client1; TargetId=Server1_Client1; ClientId=Server5_Client1,Bridge_Server5_ServerRS_Connection2,Bridge_Server1_ServerRS_Connection1
    /// // 2018-09-19 10:21:38 PM -05:00; Information; 0; 0; Server3_Client1; TargetId=Server3_Client1; ClientId=Server1_Client1,Bridge_Server1_ServerRS_Connection2,Bridge_Server3_ServerRS_Connection1
    /// // 2018-09-19 10:21:38 PM -05:00; Information; 0; 0; Server5_Client1; Hello from Server1_Client1
    /// // 2018-09-19 10:21:38 PM -05:00; Information; 0; 0; Server1_Client1; Hello from Server3_Client1
    /// // 2018-09-19 10:21:39 PM -05:00; Information; 0; 0; Server5_Client1; TargetId=Server5_Client1; ClientId=Server1_Client1,Bridge_Server1_ServerRS_Connection2,Bridge_Server5_ServerRS_Connection1
    /// // 2018-09-19 10:21:39 PM -05:00; Information; 0; 0; Server1_Client1; TargetId=Server1_Client1; ClientId=Server3_Client1,Bridge_Server3_ServerRS_Connection2,Bridge_Server1_ServerRS_Connection1
    /// // .
    /// // .
    /// // .
    /// // 2018-09-19 10:24:36 PM -05:00; Information; 0; 0; Server1_Client1; Hello from Server5_Client1
    /// // 2018-09-19 10:24:36 PM -05:00; Information; 0; 0; Server3_Client1; Hello from Server1_Client1
    /// // 2018-09-19 10:24:36 PM -05:00; Information; 0; 0; Server1_Client1; TargetId=Server1_Client1; ClientId=Server5_Client1,Bridge_Server5_ServerRS_Connection2,Bridge_Server1_ServerRS_Connection1
    /// // 2018-09-19 10:24:36 PM -05:00; Information; 0; 0; Server3_Client1; TargetId=Server3_Client1; ClientId=Server1_Client1,Bridge_Server1_ServerRS_Connection2,Bridge_Server3_ServerRS_Connection1
    /// // 2018-09-19 10:24:36 PM -05:00; Information; 0; 0; Server5_Client1; Hello from Server1_Client1
    /// // 2018-09-19 10:24:36 PM -05:00; Information; 0; 0; Server1_Client1; Hello from Server3_Client1
    /// // 2018-09-19 10:24:37 PM -05:00; Information; 0; 0; Server5_Client1; TargetId=Server5_Client1; ClientId=Server1_Client1,Bridge_Server1_ServerRS_Connection2,Bridge_Server5_ServerRS_Connection1
    /// // 2018-09-19 10:24:37 PM -05:00; Information; 0; 0; Server1_Client1; TargetId=Server1_Client1; ClientId=Server3_Client1,Bridge_Server3_ServerRS_Connection2,Bridge_Server1_ServerRS_Connection1
    /// // 2018-09-19 10:24:37 PM -05:00; Information; 0; 0; Server1_Client1; Hello from Server5_Client1
    /// // 2018-09-19 10:24:37 PM -05:00; Information; 0; 0; Server3_Client1; Hello from Server1_Client1
    /// // 2018-09-19 10:24:37 PM -05:00; Information; 0; 0; ServerRS_Client1; F5 Message
    /// // 2018-09-19 10:24:37 PM -05:00; Information; 0; 0; Server5_Client1; F5 Message
    /// // 2018-09-19 10:24:37 PM -05:00; Information; 0; 0; Server4_Client1; F5 Message
    /// // 2018-09-19 10:24:37 PM -05:00; Information; 0; 0; Server1_Client1; TargetId=Server1_Client1; ClientId=Server5_Client1,Bridge_Server5_ServerRS_Connection2,Bridge_Server1_ServerRS_Connection1
    /// // 2018-09-19 10:24:37 PM -05:00; Information; 0; 0; Server1_Client1; F5 Message
    /// // 2018-09-19 10:24:37 PM -05:00; Information; 0; 0; Server3_Client1; TargetId=Server3_Client1; ClientId=Server1_Client1,Bridge_Server1_ServerRS_Connection2,Bridge_Server3_ServerRS_Connection1
    /// // 2018-09-19 10:24:37 PM -05:00; Information; 0; 0; Server3_Client1; F5 Message
    /// // 2018-09-19 10:24:37 PM -05:00; Information; 0; 0; Server5_Client1; TargetId=; ClientId=Server2_Client1,Bridge_Server2_ServerRS_Connection2,Bridge_Server5_ServerRS_Connection1
    /// // 2018-09-19 10:24:37 PM -05:00; Information; 0; 0; Server5_Client1; Hello from Server1_Client1
    /// // 2018-09-19 10:24:37 PM -05:00; Information; 0; 0; Server2_Client1; Hello from Server5_Client1
    /// // 2018-09-19 10:24:38 PM -05:00; Information; 0; 0; Server1_Client1; TargetId=; ClientId=Server2_Client1,Bridge_Server2_ServerRS_Connection2,Bridge_Server1_ServerRS_Connection1
    /// // 2018-09-19 10:24:38 PM -05:00; Information; 0; 0; Server1_Client1; Hello from Server3_Client1
    /// // 2018-09-19 10:24:38 PM -05:00; Information; 0; 0; Server2_Client1; Hello from Server1_Client1
    /// // 2018-09-19 10:24:38 PM -05:00; Information; 0; 0; Server3_Client1; TargetId=; ClientId=Server2_Client1,Bridge_Server2_ServerRS_Connection2,Bridge_Server3_ServerRS_Connection1
    /// // 2018-09-19 10:24:38 PM -05:00; Information; 0; 0; Server2_Client1; Hello from Server3_Client1
    /// // 2018-09-19 10:24:38 PM -05:00; Information; 0; 0; Server5_Client1; TargetId=Server5_Client1; ClientId=Server1_Client1,Bridge_Server1_ServerRS_Connection2,Bridge_Server5_ServerRS_Connection1
    /// // 2018-09-19 10:24:38 PM -05:00; Information; 0; 0; Server1_Client1; TargetId=Server1_Client1; ClientId=Server3_Client1,Bridge_Server3_ServerRS_Connection2,Bridge_Server1_ServerRS_Connection1
    /// // .
    /// // .
    /// // .
    /// // 2018-09-19 10:25:37 PM -05:00; Information; 0; 0; Server1_Client1; Hello from Server5_Client1
    /// // 2018-09-19 10:25:37 PM -05:00; Information; 0; 0; Server3_Client1; Hello from Server1_Client1
    /// // 2018-09-19 10:25:38 PM -05:00; Information; 0; 0; Server1_Client1; TargetId=Server1_Client1; ClientId=Server5_Client1,Bridge_Server5_ServerRS_Connection2,Bridge_Server1_ServerRS_Connection1
    /// // 2018-09-19 10:25:38 PM -05:00; Information; 0; 0; Server3_Client1; TargetId=Server3_Client1; ClientId=Server1_Client1,Bridge_Server1_ServerRS_Connection2,Bridge_Server3_ServerRS_Connection1
    /// // 2018-09-19 10:25:38 PM -05:00; Information; 0; 0; Server5_Client1; Hello from Server1_Client1
    /// // 2018-09-19 10:25:38 PM -05:00; Information; 0; 0; Server1_Client1; Hello from Server3_Client1
    /// // 2018-09-19 10:25:38 PM -05:00; Information; 0; 0; Server5_Client1; TargetId=Server5_Client1; ClientId=Server1_Client1,Bridge_Server1_ServerRS_Connection2,Bridge_Server5_ServerRS_Connection1
    /// // 2018-09-19 10:25:38 PM -05:00; Information; 0; 0; Server1_Client1; TargetId=Server1_Client1; ClientId=Server3_Client1,Bridge_Server3_ServerRS_Connection2,Bridge_Server1_ServerRS_Connection1
    /// // 2018-09-19 10:25:38 PM -05:00; Information; 0; 0; Server1_Client1; Hello from Server5_Client1
    /// // 2018-09-19 10:25:38 PM -05:00; Information; 0; 0; Server3_Client1; Hello from Server1_Client1
    /// // 2018-09-19 10:25:39 PM -05:00; Information; 0; 0; Server1_Client1; TargetId=Server1_Client1; ClientId=Server5_Client1,Bridge_Server5_ServerRS_Connection2,Bridge_Server1_ServerRS_Connection1
    /// // 2018-09-19 10:25:39 PM -05:00; Information; 0; 0; Server3_Client1; TargetId=Server3_Client1; ClientId=Server1_Client1,Bridge_Server1_ServerRS_Connection2,Bridge_Server3_ServerRS_Connection1
    /// // 2018-09-19 10:25:39 PM -05:00; Information; 0; 0; Server5_Client1; Hello from Server1_Client1
    /// // 2018-09-19 10:25:39 PM -05:00; Information; 0; 0; Server1_Client1; Hello from Server3_Client1
    /// </code>
    /// <para>Relay Server Configuration.</para>
    /// <code>
    /// &lt;?xml version="1.0" encoding="utf-8"?&gt;
    /// &lt;group key="Server"&gt;
    ///   &lt;items&gt;
    ///     &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.Http.Server, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///   &lt;/items&gt;
    ///   &lt;groups&gt;
    ///     &lt;group key="ChannelAddress"&gt;
    ///       &lt;items&gt;
    ///         &lt;item key="IPAddress" type="System.String"&gt;localhost&lt;/item&gt;
    ///         &lt;item key="Name" type="System.String"&gt;ServerRS&lt;/item&gt;
    ///         &lt;item key="Port" type="System.Int32"&gt;50000&lt;/item&gt;
    ///       &lt;/items&gt;
    ///     &lt;/group&gt;
    ///     &lt;group key="ServerConfiguration"&gt;
    ///       &lt;items&gt;
    ///         &lt;item key="Id" type="System.String"&gt;ServerRS&lt;/item&gt;
    ///       &lt;/items&gt;
    ///       &lt;groups&gt;
    ///         &lt;group key="OverrideTypesFilter" /&gt;
    ///       &lt;/groups&gt;
    ///     &lt;/group&gt;
    ///     &lt;group key="TransportController"&gt;
    ///       &lt;items&gt;
    ///         &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.TransportController, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///       &lt;/items&gt;
    ///       &lt;groups&gt;
    ///         &lt;group key="RegistrationController"&gt;
    ///           &lt;items&gt;
    ///             &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.RegistrationControllers.TunnellingRegistrationController, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///           &lt;/items&gt;
    ///           &lt;groups&gt;
    ///             &lt;group key="ChallengeController"&gt;
    ///               &lt;items&gt;
    ///                 &lt;item key="Evidence" type="System.Byte[]"&gt;AYAAf/8/3uhXTYAukg/y+6nFqgFPJwSitDRWgYQuIVCCw9b1zy95EcB846uJmprQpU7PDj55I50Su2t/DSl00JWshqe7J8QLc4Ytc3vbHpo06Hl10IUS5s+r4m2n5YevluS5DCA1kLyi1+5CmYehz0zdQs8SVhDCjkomjCC+C3w+1WnZYw==&lt;/item&gt;
    ///                 &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.ChallengeControllers.PasswordChallengeController, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///               &lt;/items&gt;
    ///             &lt;/group&gt;
    ///           &lt;/groups&gt;
    ///         &lt;/group&gt;
    ///         &lt;group key="TransportConfiguration"&gt;
    ///           &lt;items&gt;
    ///             &lt;item key="ChunkSize" type="System.Int32"&gt;512&lt;/item&gt;
    ///             &lt;item key="Compressor" type="System.Type"&gt;dodSON.Core.Compression.DeflateStreamCompressor, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///             &lt;item key="EnvelopeCacheTimeLimit" type="System.TimeSpan"&gt;0.00:00:10.0&lt;/item&gt;
    ///             &lt;item key="SeenMessageCacheTimeLimit" type="System.TimeSpan"&gt;0.00:00:07.0&lt;/item&gt;
    ///             &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.TransportConfiguration, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///             &lt;item key="UseChunking" type="System.Boolean"&gt;True&lt;/item&gt;
    ///           &lt;/items&gt;
    ///           &lt;groups&gt;
    ///             &lt;group key="EncryptorConfigurations"&gt;
    ///               &lt;groups&gt;
    ///                 &lt;group key="Encryptor01"&gt;
    ///                   &lt;items&gt;
    ///                     &lt;item key="SymmetricAlgorithmType" type="System.Type"&gt;System.Security.Cryptography.RijndaelManaged, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/item&gt;
    ///                     &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Cryptography.EncryptorConfiguration, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///                   &lt;/items&gt;
    ///                   &lt;groups&gt;
    ///                     &lt;group key="SaltedPassword"&gt;
    ///                       &lt;items&gt;
    ///                         &lt;item key="HashAlgorithmType" type="System.Type"&gt;System.Security.Cryptography.SHA512Managed, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/item&gt;
    ///                         &lt;item key="PasswordSaltHash" type="System.Byte[]"&gt;AUAAv/9sNZGLIbbs7TzhthWHFDVOhvsSYQxKE6GSSl6zR+K0e9/sxum203fOxEwGH9dNykuz61UJdQL2b7DkMtCVoBpD&lt;/item&gt;
    ///                         &lt;item key="Salt" type="System.Byte[]"&gt;AYAAf/9n1crvzyPOIT7UvsvBBJ5W2LSvchROJez7Gxs/Sj1s0NqiiJKbhPLoyYl3Bd2D4FlhahNTxP7tdVd8MHvzQy8To8ur6KfQj7P+a2em4ZQG9A3S5FkVkM7k58Amc/69ZGarueHO5uVVn2DAfQ0J9YitJxGOK66W1zyHPf/aVHcu4A==&lt;/item&gt;
    ///                         &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Cryptography.SaltedPassword, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///                       &lt;/items&gt;
    ///                     &lt;/group&gt;
    ///                   &lt;/groups&gt;
    ///                 &lt;/group&gt;
    ///               &lt;/groups&gt;
    ///             &lt;/group&gt;
    ///           &lt;/groups&gt;
    ///         &lt;/group&gt;
    ///       &lt;/groups&gt;
    ///     &lt;/group&gt;
    ///   &lt;/groups&gt;
    /// &lt;/group&gt;
    /// </code>
    /// <para>Relay Server-Client1 Configuration.</para>
    /// <code>
    /// &lt;?xml version="1.0" encoding="utf-8"?&gt;
    /// &lt;group key="Client"&gt;
    ///   &lt;items&gt;
    ///     &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.Http.Client, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///   &lt;/items&gt;
    ///   &lt;groups&gt;
    ///     &lt;group key="ChannelAddress"&gt;
    ///       &lt;items&gt;
    ///         &lt;item key="IPAddress" type="System.String"&gt;localhost&lt;/item&gt;
    ///         &lt;item key="Name" type="System.String"&gt;ServerRS&lt;/item&gt;
    ///         &lt;item key="Port" type="System.Int32"&gt;50000&lt;/item&gt;
    ///       &lt;/items&gt;
    ///     &lt;/group&gt;
    ///     &lt;group key="ClientConfiguration"&gt;
    ///       &lt;items&gt;
    ///         &lt;item key="Id" type="System.String"&gt;ServerRS_Client1&lt;/item&gt;
    ///         &lt;item key="ReceiveSelfSentMessages" type="System.Boolean"&gt;False&lt;/item&gt;
    ///       &lt;/items&gt;
    ///       &lt;groups&gt;
    ///         &lt;group key="ReceivableTypesFilter"&gt;
    ///           &lt;groups&gt;
    ///             &lt;group key="PayloadTypeInfo 1"&gt;
    ///               &lt;items&gt;
    ///                 &lt;item key="TypeName" type="System.String"&gt;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/item&gt;
    ///               &lt;/items&gt;
    ///             &lt;/group&gt;
    ///           &lt;/groups&gt;
    ///         &lt;/group&gt;
    ///         &lt;group key="TransmittableTypesFilter"&gt;
    ///           &lt;groups&gt;
    ///             &lt;group key="PayloadTypeInfo 1"&gt;
    ///               &lt;items&gt;
    ///                 &lt;item key="TypeName" type="System.String"&gt;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/item&gt;
    ///               &lt;/items&gt;
    ///             &lt;/group&gt;
    ///           &lt;/groups&gt;
    ///         &lt;/group&gt;
    ///       &lt;/groups&gt;
    ///     &lt;/group&gt;
    ///     &lt;group key="RegistrationController"&gt;
    ///       &lt;items&gt;
    ///         &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.RegistrationControllers.TunnellingRegistrationController, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///       &lt;/items&gt;
    ///       &lt;groups&gt;
    ///         &lt;group key="ChallengeController"&gt;
    ///           &lt;items&gt;
    ///             &lt;item key="Evidence" type="System.Byte[]"&gt;AYAAf/8/3uhXTYAukg/y+6nFqgFPJwSitDRWgYQuIVCCw9b1zy95EcB846uJmprQpU7PDj55I50Su2t/DSl00JWshqe7J8QLc4Ytc3vbHpo06Hl10IUS5s+r4m2n5YevluS5DCA1kLyi1+5CmYehz0zdQs8SVhDCjkomjCC+C3w+1WnZYw==&lt;/item&gt;
    ///             &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.ChallengeControllers.PasswordChallengeController, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///           &lt;/items&gt;
    ///         &lt;/group&gt;
    ///       &lt;/groups&gt;
    ///     &lt;/group&gt;
    ///   &lt;/groups&gt;
    /// &lt;/group&gt;
    /// </code>
    /// <para>Server1 Configuration.</para>
    /// <code>
    /// &lt;?xml version="1.0" encoding="utf-8"?&gt;
    /// &lt;group key="Server"&gt;
    ///   &lt;items&gt;
    ///     &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.NamedPipes.Server, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///   &lt;/items&gt;
    ///   &lt;groups&gt;
    ///     &lt;group key="ChannelAddress"&gt;
    ///       &lt;items&gt;
    ///         &lt;item key="IPAddress" type="System.String"&gt;localhost&lt;/item&gt;
    ///         &lt;item key="Name" type="System.String"&gt;Server1&lt;/item&gt;
    ///         &lt;item key="Port" type="System.Int32"&gt;49152&lt;/item&gt;
    ///       &lt;/items&gt;
    ///     &lt;/group&gt;
    ///     &lt;group key="ServerConfiguration"&gt;
    ///       &lt;items&gt;
    ///         &lt;item key="Id" type="System.String"&gt;Server1&lt;/item&gt;
    ///       &lt;/items&gt;
    ///       &lt;groups&gt;
    ///         &lt;group key="OverrideTypesFilter" /&gt;
    ///       &lt;/groups&gt;
    ///     &lt;/group&gt;
    ///     &lt;group key="TransportController"&gt;
    ///       &lt;items&gt;
    ///         &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.TransportController, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///       &lt;/items&gt;
    ///       &lt;groups&gt;
    ///         &lt;group key="RegistrationController"&gt;
    ///           &lt;items&gt;
    ///             &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.RegistrationControllers.TunnellingRegistrationController, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///           &lt;/items&gt;
    ///           &lt;groups&gt;
    ///             &lt;group key="ChallengeController"&gt;
    ///               &lt;items&gt;
    ///                 &lt;item key="Evidence" type="System.Byte[]"&gt;AYAAf/81lqctdheNaEuOTKzwGrH0fxC1oP0Zfy4Z+K0sxHm6pVo1ljcGiROWOy+eyk/CkQgnZvyRrd9F/SUb9s7dcPZZ0h2ogJgEMAzzLX/bm1khercg3+hpQKiUSlj8e9+uYuVIxnHqVEtaz7UnNfgNM1djmkmebNjCxufhA1N9AiuxyA==&lt;/item&gt;
    ///                 &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.ChallengeControllers.PasswordChallengeController, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///               &lt;/items&gt;
    ///             &lt;/group&gt;
    ///           &lt;/groups&gt;
    ///         &lt;/group&gt;
    ///         &lt;group key="TransportConfiguration"&gt;
    ///           &lt;items&gt;
    ///             &lt;item key="ChunkSize" type="System.Int32"&gt;512&lt;/item&gt;
    ///             &lt;item key="Compressor" type="System.Type"&gt;dodSON.Core.Compression.DeflateStreamCompressor, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///             &lt;item key="EnvelopeCacheTimeLimit" type="System.TimeSpan"&gt;0.00:00:10.0&lt;/item&gt;
    ///             &lt;item key="SeenMessageCacheTimeLimit" type="System.TimeSpan"&gt;0.00:00:07.0&lt;/item&gt;
    ///             &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.TransportConfiguration, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///             &lt;item key="UseChunking" type="System.Boolean"&gt;True&lt;/item&gt;
    ///           &lt;/items&gt;
    ///           &lt;groups&gt;
    ///             &lt;group key="EncryptorConfigurations"&gt;
    ///               &lt;groups&gt;
    ///                 &lt;group key="Encryptor01"&gt;
    ///                   &lt;items&gt;
    ///                     &lt;item key="SymmetricAlgorithmType" type="System.Type"&gt;System.Security.Cryptography.RijndaelManaged, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/item&gt;
    ///                     &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Cryptography.EncryptorConfiguration, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///                   &lt;/items&gt;
    ///                   &lt;groups&gt;
    ///                     &lt;group key="SaltedPassword"&gt;
    ///                       &lt;items&gt;
    ///                         &lt;item key="HashAlgorithmType" type="System.Type"&gt;System.Security.Cryptography.SHA512Managed, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/item&gt;
    ///                         &lt;item key="PasswordSaltHash" type="System.Byte[]"&gt;AUAAv//GzzWNxsv3x0MZ7+pDk1K8wXjxfF77m1/RjxqyvZpfjCB0zKHsyZcB6OFlb7++X6m5IO/+B1pnAbZSh91BT9wa&lt;/item&gt;
    ///                         &lt;item key="Salt" type="System.Byte[]"&gt;AYAAf/8/C8C5kDDVrb8i7C7pNVaDpBOli63nwO1o6w1rRw94K7laWSGUln4zffPm/kD8RbsY+Rz6q46fyKWjbsyNN+CvuJ9RM3xj9EajBDXKuY3dIRNwIdPxl3BkcFONbwy7Qapz0A0LUgD6Sh+wz6sEU3CoZs3iLrZT+mYwdxeFxLjW9Q==&lt;/item&gt;
    ///                         &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Cryptography.SaltedPassword, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///                       &lt;/items&gt;
    ///                     &lt;/group&gt;
    ///                   &lt;/groups&gt;
    ///                 &lt;/group&gt;
    ///               &lt;/groups&gt;
    ///             &lt;/group&gt;
    ///           &lt;/groups&gt;
    ///         &lt;/group&gt;
    ///       &lt;/groups&gt;
    ///     &lt;/group&gt;
    ///   &lt;/groups&gt;
    /// &lt;/group&gt;
    /// </code> 
    /// <para>Server1-Client1 Configuration.</para>
    /// <code>
    /// &lt;?xml version="1.0" encoding="utf-8"?&gt;
    /// &lt;group key="Client"&gt;
    ///   &lt;items&gt;
    ///     &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.NamedPipes.Client, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///   &lt;/items&gt;
    ///   &lt;groups&gt;
    ///     &lt;group key="ChannelAddress"&gt;
    ///       &lt;items&gt;
    ///         &lt;item key="IPAddress" type="System.String"&gt;localhost&lt;/item&gt;
    ///         &lt;item key="Name" type="System.String"&gt;Server1&lt;/item&gt;
    ///         &lt;item key="Port" type="System.Int32"&gt;49152&lt;/item&gt;
    ///       &lt;/items&gt;
    ///     &lt;/group&gt;
    ///     &lt;group key="ClientConfiguration"&gt;
    ///       &lt;items&gt;
    ///         &lt;item key="Id" type="System.String"&gt;Server1_Client1&lt;/item&gt;
    ///         &lt;item key="ReceiveSelfSentMessages" type="System.Boolean"&gt;False&lt;/item&gt;
    ///       &lt;/items&gt;
    ///       &lt;groups&gt;
    ///         &lt;group key="ReceivableTypesFilter"&gt;
    ///           &lt;groups&gt;
    ///             &lt;group key="PayloadTypeInfo 1"&gt;
    ///               &lt;items&gt;
    ///                 &lt;item key="TypeName" type="System.String"&gt;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/item&gt;
    ///               &lt;/items&gt;
    ///             &lt;/group&gt;
    ///           &lt;/groups&gt;
    ///         &lt;/group&gt;
    ///         &lt;group key="TransmittableTypesFilter"&gt;
    ///           &lt;groups&gt;
    ///             &lt;group key="PayloadTypeInfo 1"&gt;
    ///               &lt;items&gt;
    ///                 &lt;item key="TypeName" type="System.String"&gt;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/item&gt;
    ///               &lt;/items&gt;
    ///             &lt;/group&gt;
    ///           &lt;/groups&gt;
    ///         &lt;/group&gt;
    ///       &lt;/groups&gt;
    ///     &lt;/group&gt;
    ///     &lt;group key="RegistrationController"&gt;
    ///       &lt;items&gt;
    ///         &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.RegistrationControllers.TunnellingRegistrationController, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///       &lt;/items&gt;
    ///       &lt;groups&gt;
    ///         &lt;group key="ChallengeController"&gt;
    ///           &lt;items&gt;
    ///             &lt;item key="Evidence" type="System.Byte[]"&gt;AYAAf/81lqctdheNaEuOTKzwGrH0fxC1oP0Zfy4Z+K0sxHm6pVo1ljcGiROWOy+eyk/CkQgnZvyRrd9F/SUb9s7dcPZZ0h2ogJgEMAzzLX/bm1khercg3+hpQKiUSlj8e9+uYuVIxnHqVEtaz7UnNfgNM1djmkmebNjCxufhA1N9AiuxyA==&lt;/item&gt;
    ///             &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.ChallengeControllers.PasswordChallengeController, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///           &lt;/items&gt;
    ///         &lt;/group&gt;
    ///       &lt;/groups&gt;
    ///     &lt;/group&gt;
    ///   &lt;/groups&gt;
    /// &lt;/group&gt;
    /// </code> 
    /// <para>Server1 to Relay Server Bridge Configuration.</para>
    /// <code>
    /// &lt;?xml version="1.0" encoding="utf-8"?&gt;
    /// &lt;group key="Bridge"&gt;
    ///   &lt;groups&gt;
    ///     &lt;group key="External Client"&gt;
    ///       &lt;items&gt;
    ///         &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.Http.Client, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///       &lt;/items&gt;
    ///       &lt;groups&gt;
    ///         &lt;group key="ChannelAddress"&gt;
    ///           &lt;items&gt;
    ///             &lt;item key="IPAddress" type="System.String"&gt;localhost&lt;/item&gt;
    ///             &lt;item key="Name" type="System.String"&gt;ServerRS&lt;/item&gt;
    ///             &lt;item key="Port" type="System.Int32"&gt;50000&lt;/item&gt;
    ///           &lt;/items&gt;
    ///         &lt;/group&gt;
    ///         &lt;group key="ClientConfiguration"&gt;
    ///           &lt;items&gt;
    ///             &lt;item key="Id" type="System.String"&gt;Bridge_Server1_ServerRS_Connection2&lt;/item&gt;
    ///             &lt;item key="ReceiveSelfSentMessages" type="System.Boolean"&gt;False&lt;/item&gt;
    ///           &lt;/items&gt;
    ///           &lt;groups&gt;
    ///             &lt;group key="ReceivableTypesFilter"&gt;
    ///               &lt;groups&gt;
    ///                 &lt;group key="PayloadTypeInfo 1"&gt;
    ///                   &lt;items&gt;
    ///                     &lt;item key="TypeName" type="System.String"&gt;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/item&gt;
    ///                   &lt;/items&gt;
    ///                 &lt;/group&gt;
    ///               &lt;/groups&gt;
    ///             &lt;/group&gt;
    ///             &lt;group key="TransmittableTypesFilter"&gt;
    ///               &lt;groups&gt;
    ///                 &lt;group key="PayloadTypeInfo 1"&gt;
    ///                   &lt;items&gt;
    ///                     &lt;item key="TypeName" type="System.String"&gt;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/item&gt;
    ///                   &lt;/items&gt;
    ///                 &lt;/group&gt;
    ///               &lt;/groups&gt;
    ///             &lt;/group&gt;
    ///           &lt;/groups&gt;
    ///         &lt;/group&gt;
    ///         &lt;group key="RegistrationController"&gt;
    ///           &lt;items&gt;
    ///             &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.RegistrationControllers.TunnellingRegistrationController, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///           &lt;/items&gt;
    ///           &lt;groups&gt;
    ///             &lt;group key="ChallengeController"&gt;
    ///               &lt;items&gt;
    ///                 &lt;item key="Evidence" type="System.Byte[]"&gt;AYAAf/8/3uhXTYAukg/y+6nFqgFPJwSitDRWgYQuIVCCw9b1zy95EcB846uJmprQpU7PDj55I50Su2t/DSl00JWshqe7J8QLc4Ytc3vbHpo06Hl10IUS5s+r4m2n5YevluS5DCA1kLyi1+5CmYehz0zdQs8SVhDCjkomjCC+C3w+1WnZYw==&lt;/item&gt;
    ///                 &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.ChallengeControllers.PasswordChallengeController, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///               &lt;/items&gt;
    ///             &lt;/group&gt;
    ///           &lt;/groups&gt;
    ///         &lt;/group&gt;
    ///       &lt;/groups&gt;
    ///     &lt;/group&gt;
    ///     &lt;group key="Internal Client"&gt;
    ///       &lt;items&gt;
    ///         &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.NamedPipes.Client, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///       &lt;/items&gt;
    ///       &lt;groups&gt;
    ///         &lt;group key="ChannelAddress"&gt;
    ///           &lt;items&gt;
    ///             &lt;item key="IPAddress" type="System.String"&gt;localhost&lt;/item&gt;
    ///             &lt;item key="Name" type="System.String"&gt;Server1&lt;/item&gt;
    ///             &lt;item key="Port" type="System.Int32"&gt;49152&lt;/item&gt;
    ///           &lt;/items&gt;
    ///         &lt;/group&gt;
    ///         &lt;group key="ClientConfiguration"&gt;
    ///           &lt;items&gt;
    ///             &lt;item key="Id" type="System.String"&gt;Bridge_Server1_ServerRS_Connection1&lt;/item&gt;
    ///             &lt;item key="ReceiveSelfSentMessages" type="System.Boolean"&gt;False&lt;/item&gt;
    ///           &lt;/items&gt;
    ///           &lt;groups&gt;
    ///             &lt;group key="ReceivableTypesFilter"&gt;
    ///               &lt;groups&gt;
    ///                 &lt;group key="PayloadTypeInfo 1"&gt;
    ///                   &lt;items&gt;
    ///                     &lt;item key="TypeName" type="System.String"&gt;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/item&gt;
    ///                   &lt;/items&gt;
    ///                 &lt;/group&gt;
    ///               &lt;/groups&gt;
    ///             &lt;/group&gt;
    ///             &lt;group key="TransmittableTypesFilter"&gt;
    ///               &lt;groups&gt;
    ///                 &lt;group key="PayloadTypeInfo 1"&gt;
    ///                   &lt;items&gt;
    ///                     &lt;item key="TypeName" type="System.String"&gt;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/item&gt;
    ///                   &lt;/items&gt;
    ///                 &lt;/group&gt;
    ///               &lt;/groups&gt;
    ///             &lt;/group&gt;
    ///           &lt;/groups&gt;
    ///         &lt;/group&gt;
    ///         &lt;group key="RegistrationController"&gt;
    ///           &lt;items&gt;
    ///             &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.RegistrationControllers.TunnellingRegistrationController, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///           &lt;/items&gt;
    ///           &lt;groups&gt;
    ///             &lt;group key="ChallengeController"&gt;
    ///               &lt;items&gt;
    ///                 &lt;item key="Evidence" type="System.Byte[]"&gt;AYAAf/81lqctdheNaEuOTKzwGrH0fxC1oP0Zfy4Z+K0sxHm6pVo1ljcGiROWOy+eyk/CkQgnZvyRrd9F/SUb9s7dcPZZ0h2ogJgEMAzzLX/bm1khercg3+hpQKiUSlj8e9+uYuVIxnHqVEtaz7UnNfgNM1djmkmebNjCxufhA1N9AiuxyA==&lt;/item&gt;
    ///                 &lt;item key="Type" type="System.Type"&gt;dodSON.Core.Networking.ChallengeControllers.PasswordChallengeController, dodSON.Core, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null&lt;/item&gt;
    ///               &lt;/items&gt;
    ///             &lt;/group&gt;
    ///           &lt;/groups&gt;
    ///         &lt;/group&gt;
    ///       &lt;/groups&gt;
    ///     &lt;/group&gt;
    ///   &lt;/groups&gt;
    /// &lt;/group&gt;
    /// </code>
    /// </example>
    public class Bridge
        : Configuration.IConfigurable
    {
        #region Ctor
        private Bridge()
        {
        }
        /// <summary>
        /// Instantiates a new instance of the <see cref="Bridge"/> class.
        /// </summary>
        /// <param name="internalClient">The <see cref="IClient"/> connected to the local server.</param>
        /// <param name="externalClient">The <see cref="IClient"/> connected to the remote server.</param>
        public Bridge(IClient internalClient,
                      IClient externalClient)
            : this()
        {
            InternalClient = internalClient ?? throw new ArgumentNullException(nameof(internalClient));
            ExternalClient = externalClient ?? throw new ArgumentNullException(nameof(externalClient));
            //
            InternalClient.MessageBus += InternalClient_MessageBus;
            ExternalClient.MessageBus += ExternalClient_MessageBus;
        }
        /// <summary>
        /// Instantiates an new instance with the data from the <paramref name="configuration"/>.
        /// </summary>
        /// <param name="configuration">The configuration to use to populate the new instance.</param>
        public Bridge(Configuration.IConfigurationGroup configuration)
            : this()
        {
            if (configuration == null)
            {
                throw new ArgumentNullException(nameof(configuration));
            }
            if (configuration.Key != "Bridge")
            {
                throw new ArgumentException($"Wrong configuration. Configuration Key must equal \"Bridge\". Configuration Key={configuration.Key}", nameof(configuration));
            }
            // internal client
            var internalClientConfiguration = Core.Configuration.ConfigurationHelper.FindConfigurationGroup(configuration, "Internal Client", true);
            ((Configuration.IConfigurationGroupAdvanced)internalClientConfiguration).SetKey("Client");
            InternalClient = (IClient)Core.Configuration.ConfigurationHelper.InstantiateTypeFromConfigurationGroup(internalClientConfiguration);
            InternalClient.MessageBus += InternalClient_MessageBus;
            // external client
            var externalClientConfiguration = Core.Configuration.ConfigurationHelper.FindConfigurationGroup(configuration, "External Client", true);
            ((Configuration.IConfigurationGroupAdvanced)externalClientConfiguration).SetKey("Client");
            ExternalClient = (IClient)Core.Configuration.ConfigurationHelper.InstantiateTypeFromConfigurationGroup(externalClientConfiguration);
            ExternalClient.MessageBus += ExternalClient_MessageBus;
        }
        #endregion
        #region IConfigurationProvider Methods
        /// <summary>
        /// Will populate an <see cref="Core.Configuration.IConfigurationGroup"/> containing data needed to serialize the target object. 
        /// </summary>
        public Configuration.IConfigurationGroup Configuration
        {
            get
            {
                var result = new Configuration.ConfigurationGroup("Bridge");
                // clone the client, change its key, save clone
                // you do not want to change the key in the original item
                var internalClone = Converters.ConvertersHelper.Clone(InternalClient.Configuration);
                ((Configuration.IConfigurationGroupAdvanced)internalClone).SetKey("Internal Client");
                result.Add(internalClone);
                // clone the client, change its key, save clone
                // you do not want to change the key in the original item
                var externalClone = Converters.ConvertersHelper.Clone(ExternalClient.Configuration);
                ((Configuration.IConfigurationGroupAdvanced)externalClone).SetKey("External Client");
                result.Add(externalClone);
                //
                return result;
            }
        }
        #endregion
        #region Public Methods
        /// <summary>
        /// The <see cref="IClient"/> connected to the local <see cref="IServer"/>.
        /// </summary>
        public IClient InternalClient { get; }
        /// <summary>
        /// The <see cref="IClient"/> connected to the remote <see cref="IServer"/>.
        /// </summary>
        public IClient ExternalClient { get; }
        /// <summary>
        /// Attempts to open the <see cref="InternalClient"/> and the <see cref="ExternalClient"/>.
        /// </summary>
        /// <param name="exception">Returns an <see cref="Exception"/> if anything should go wrong in the attempt.</param>
        /// <returns>The state of the channel's connection.</returns>
        public ChannelStates Open(out Exception exception)
        {
            var internalClientChannelState = InternalClient.Open(out Exception internalClientEx);
            if (internalClientChannelState != ChannelStates.Open)
            {
                exception = internalClientEx;
                return internalClientChannelState;
            }
            var externalClientChannelState = ExternalClient.Open(out Exception externalClientEx);
            if (externalClientChannelState != ChannelStates.Open)
            {
                exception = externalClientEx;
                return externalClientChannelState;
            }
            exception = null;
            return ChannelStates.Open;
        }
        /// <summary>
        /// Attempts to close the <see cref="InternalClient"/> and the <see cref="ExternalClient"/>.
        /// </summary>
        /// <param name="exception">Returns an <see cref="Exception"/> if anything should go wrong in the attempt.</param>
        /// <returns><b>True</b> if both clients were successfully closed; otherwise <b>false</b>.</returns>
        public bool Close(out Exception exception)
        {
            InternalClient.Close(out Exception internalClientEx);
            if (internalClientEx != null)
            {
                exception = internalClientEx;
                return false;
            }
            ExternalClient.Close(out Exception externalClientEx);
            if (externalClientEx != null)
            {
                exception = externalClientEx;
                return false;
            }
            exception = null;
            return true;
        }
        #endregion
        #region Private Methods
        private void InternalClient_MessageBus(object sender, MessageEventArgs e)
        {
            // add the ExternalClient's Id to e.Message's ClientId chain
            e.Message.ClientId = e.Message.ClientId + "," + ExternalClient.Id;
            // remove the last ClientId from e.Message's TargetId chain
            if (!string.IsNullOrWhiteSpace(e.Message.TargetId))
            {
                if (e.Message.TargetId.Contains(","))
                {
                    e.Message.TargetId = e.Message.TargetId.Substring(0, e.Message.TargetId.LastIndexOf(","));
                }
            }
            // broadcast with external client
            ExternalClient.SendMessage(e.Message);
        }
        private void ExternalClient_MessageBus(object sender, MessageEventArgs e)
        {
            // add the InternalClient's Id to e.Message's ClientId chain
            e.Message.ClientId = e.Message.ClientId + "," + InternalClient.Id;
            // remove the last ClientId from e.Message's TargetId chain
            if (!string.IsNullOrWhiteSpace(e.Message.TargetId))
            {
                if (e.Message.TargetId.Contains(","))
                {
                    e.Message.TargetId = e.Message.TargetId.Substring(0, e.Message.TargetId.LastIndexOf(","));
                }
            }
            // broadcast with internal client
            InternalClient.SendMessage(e.Message);
        }
        #endregion
    }
}
